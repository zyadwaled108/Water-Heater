
WaterHeater_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d66  00000dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800062  00800062  00000dfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f6a  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001202  00000000  00000000  000041aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c76  00000000  00000000  000053ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00007024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001350  00000000  00000000  000077a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9a  00000000  00000000  00008af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00009a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_2>
   c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	ef 03       	fmulsu	r22, r23
  56:	f2 03       	fmuls	r23, r18
  58:	f5 03       	fmuls	r23, r21
  5a:	f8 03       	fmulsu	r23, r16
  5c:	fb 03       	fmulsu	r23, r19
  5e:	fe 03       	fmulsu	r23, r22
  60:	01 04       	cpc	r0, r1
  62:	04 04       	cpc	r0, r4

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 e6       	ldi	r30, 0x66	; 102
  78:	fd e0       	ldi	r31, 0x0D	; 13
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	ae 37       	cpi	r26, 0x7E	; 126
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  9a:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

#include "WaterHeater_Interface.h"

int main(void) {
	
	WaterHeater();
  a2:	0e 94 a0 01 	call	0x340	; 0x340 <WaterHeater>
	
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <Handle_TemperatureSetting>:


// Handle Temperature Setting Mode
void Handle_TemperatureSetting(void) {

	if (g_TemperatureSettingMode)
  ac:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
  b0:	88 23       	and	r24, r24
  b2:	c9 f0       	breq	.+50     	; 0xe6 <Handle_TemperatureSetting+0x3a>
	{
		// Exit setting mode after inactivity
		if ((g_Ticks - g_lastInteractionTime) > (INACTIVITY_TIMEOUT / 10))
  b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
  b8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
  bc:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
  c0:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
  c4:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <g_lastInteractionTime>
  c8:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <g_lastInteractionTime+0x1>
  cc:	82 1b       	sub	r24, r18
  ce:	93 0b       	sbc	r25, r19
  d0:	a1 09       	sbc	r26, r1
  d2:	b1 09       	sbc	r27, r1
  d4:	85 3f       	cpi	r24, 0xF5	; 245
  d6:	91 40       	sbci	r25, 0x01	; 1
  d8:	a1 05       	cpc	r26, r1
  da:	b1 05       	cpc	r27, r1
  dc:	20 f0       	brcs	.+8      	; 0xe6 <Handle_TemperatureSetting+0x3a>
		{
			g_TemperatureSettingMode = 0;
  de:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <g_TemperatureSettingMode>
			g_BlinkFlag = 0 ;
  e2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <g_BlinkFlag>
  e6:	08 95       	ret

000000e8 <Retrieve_Temperature_From_EEPROM>:

// Retrieve Temperature from EEPROM
void Retrieve_Temperature_From_EEPROM(void) {
	
	uint8_t savedTemperature;
	savedTemperature = EEPROM_Read_DataByte(0x01);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 38 03 	call	0x670	; 0x670 <EEPROM_Read_DataByte>

    // If the Temperature is out range set it as INITIAL_TEMPERATURE
	if (savedTemperature >= MIN_TEMPERATURE && savedTemperature <= MAX_TEMPERATURE) {
  f0:	9d ed       	ldi	r25, 0xDD	; 221
  f2:	98 0f       	add	r25, r24
  f4:	99 32       	cpi	r25, 0x29	; 41
  f6:	18 f4       	brcc	.+6      	; 0xfe <Retrieve_Temperature_From_EEPROM+0x16>
		g_SetTemperature = savedTemperature;
  f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  fc:	08 95       	ret
		} else g_SetTemperature = INITIAL_TEMPERATURE;
  fe:	8c e3       	ldi	r24, 0x3C	; 60
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 104:	08 95       	ret

00000106 <System_Initialize>:

// System Initialization
void System_Initialize(void) {
	
	//Initialize the LEDs
	ON_LED_Initialize();
 106:	0e 94 66 03 	call	0x6cc	; 0x6cc <ON_LED_Initialize>
	HEATING_LED_Initialize();
 10a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <HEATING_LED_Initialize>
	COOLING_LED_Initialize();
 10e:	0e 94 89 03 	call	0x712	; 0x712 <COOLING_LED_Initialize>
	
	//Initialize the temp sensor
	LM35_Initialize();
 112:	0e 94 bf 03 	call	0x77e	; 0x77e <LM35_Initialize>
	
	//Initialize the 7Segment
	SEVSENSEGMENT_Initialize();
 116:	0e 94 8c 02 	call	0x518	; 0x518 <SEVSENSEGMENT_Initialize>
	
	//Initialize the relays
	HeaterRelay_Initialize();
 11a:	0e 94 ad 03 	call	0x75a	; 0x75a <HeaterRelay_Initialize>
	CoolerRelay_Initialize();	
 11e:	0e 94 9b 03 	call	0x736	; 0x736 <CoolerRelay_Initialize>
	
	//Initialize timer0
	Timer0_OVF_WithInterrupt_Initialize();
 122:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Timer0_OVF_WithInterrupt_Initialize>
	Timer0_OVF_WithInterrupt_Start(_T0_OVF_PRE_1024);
 126:	85 e0       	ldi	r24, 0x05	; 5
 128:	0e 94 07 06 	call	0xc0e	; 0xc0e <Timer0_OVF_WithInterrupt_Start>
	Timer0_OVF_WithInterrupt_SetDelay(10);
 12c:	6a e0       	ldi	r22, 0x0A	; 10
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Timer0_OVF_WithInterrupt_SetDelay>
	
	//Initialize the External Interrupt for the buttons
	External_Interrupt_Initialization(EXT_INT0,EXT_INTERRUPT_SENSE_RISING);
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 8a 05 	call	0xb14	; 0xb14 <External_Interrupt_Initialization>
	External_Interrupt_Initialization(EXT_INT1,EXT_INTERRUPT_SENSE_RISING);
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 8a 05 	call	0xb14	; 0xb14 <External_Interrupt_Initialization>
	External_Interrupt_Initialization(EXT_INT2,EXT_INTERRUPT_SENSE_FALLING);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 8a 05 	call	0xb14	; 0xb14 <External_Interrupt_Initialization>
	
	//Initialize the EEPROM
	EEPROM_Initialize();
 150:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_Initialize>
		
	// Retrieve last saved temperature
	Retrieve_Temperature_From_EEPROM();
 154:	0e 94 74 00 	call	0xe8	; 0xe8 <Retrieve_Temperature_From_EEPROM>
	
	//Initialize the global interrupt
	sei();
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <Save_Temperature_To_EEPROM>:
	
}

// Save Temperature to EEPROM
void Save_Temperature_To_EEPROM(void) {
	EEPROM_Write_DataByte(0x01, g_SetTemperature);
 15c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 19 03 	call	0x632	; 0x632 <EEPROM_Write_DataByte>
 168:	08 95       	ret

0000016a <__vector_1>:
		
		
	}
}

ISR(INT0_vect) {
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	// UP button pressed
	if (g_HeaterState)
 18c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
 190:	88 23       	and	r24, r24
 192:	89 f1       	breq	.+98     	; 0x1f6 <__vector_1+0x8c>
	{
		if (!g_TemperatureSettingMode) {
 194:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
 198:	81 11       	cpse	r24, r1
 19a:	12 c0       	rjmp	.+36     	; 0x1c0 <__vector_1+0x56>
			g_TemperatureSettingMode = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_TemperatureSettingMode>
			g_lastInteractionTime = g_Ticks;
 1a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
 1a6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
 1aa:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
 1ae:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
 1b2:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
 1b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
			Handle_TemperatureSetting();
 1ba:	0e 94 56 00 	call	0xac	; 0xac <Handle_TemperatureSetting>
 1be:	1b c0       	rjmp	.+54     	; 0x1f6 <__vector_1+0x8c>
		}else
		{
			g_SetTemperature = (g_SetTemperature + 5 <= MAX_TEMPERATURE) ? g_SetTemperature + 5 : MAX_TEMPERATURE;
 1c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	05 96       	adiw	r24, 0x05	; 5
 1c8:	8c 34       	cpi	r24, 0x4C	; 76
 1ca:	91 05       	cpc	r25, r1
 1cc:	14 f0       	brlt	.+4      	; 0x1d2 <__vector_1+0x68>
 1ce:	8b e4       	ldi	r24, 0x4B	; 75
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			SEVSENSEGMENT_DisplayNumber(g_SetTemperature);			
 1d6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SEVSENSEGMENT_DisplayNumber>
			Save_Temperature_To_EEPROM();
 1da:	0e 94 ae 00 	call	0x15c	; 0x15c <Save_Temperature_To_EEPROM>
			g_lastInteractionTime = g_Ticks;
 1de:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
 1e2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
 1e6:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
 1ea:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
 1ee:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
 1f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
		}
	}
	
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_2>:

ISR(INT1_vect) {
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
	// DOWN button pressed
	if (g_HeaterState)
 23a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
 23e:	88 23       	and	r24, r24
 240:	89 f1       	breq	.+98     	; 0x2a4 <__vector_2+0x8c>
	{
		if (!g_TemperatureSettingMode) {
 242:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
 246:	81 11       	cpse	r24, r1
 248:	12 c0       	rjmp	.+36     	; 0x26e <__vector_2+0x56>
			g_TemperatureSettingMode = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_TemperatureSettingMode>
			g_lastInteractionTime = g_Ticks;
 250:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
 254:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
 258:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
 25c:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
 260:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
 264:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
			Handle_TemperatureSetting();
 268:	0e 94 56 00 	call	0xac	; 0xac <Handle_TemperatureSetting>
 26c:	1b c0       	rjmp	.+54     	; 0x2a4 <__vector_2+0x8c>
		}else
		{
			g_SetTemperature = (g_SetTemperature - 5 >= MIN_TEMPERATURE) ? g_SetTemperature - 5 : MIN_TEMPERATURE;
 26e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	05 97       	sbiw	r24, 0x05	; 5
 276:	83 32       	cpi	r24, 0x23	; 35
 278:	91 05       	cpc	r25, r1
 27a:	14 f4       	brge	.+4      	; 0x280 <__vector_2+0x68>
 27c:	83 e2       	ldi	r24, 0x23	; 35
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			SEVSENSEGMENT_DisplayNumber(g_SetTemperature);		
 284:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SEVSENSEGMENT_DisplayNumber>
			Save_Temperature_To_EEPROM();
 288:	0e 94 ae 00 	call	0x15c	; 0x15c <Save_Temperature_To_EEPROM>
			g_lastInteractionTime = g_Ticks;
 28c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
 290:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
 294:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
 298:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
 29c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
 2a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
		}
		
	}
	
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <System_Off>:
}

//Turn OFF the System
void System_Off(void)
{
	ON_LED_OFF();
 2c6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <ON_LED_OFF>
	COOLING_LED_OFF();
 2ca:	0e 94 95 03 	call	0x72a	; 0x72a <COOLING_LED_OFF>
	HEATING_LED_OFF();
 2ce:	0e 94 7e 03 	call	0x6fc	; 0x6fc <HEATING_LED_OFF>
	
	CoolerRelay_Off();
 2d2:	0e 94 a7 03 	call	0x74e	; 0x74e <CoolerRelay_Off>
	HeaterRelay_Off();
 2d6:	0e 94 b9 03 	call	0x772	; 0x772 <HeaterRelay_Off>
	
	SEVSENSEGMENT_OFF();
 2da:	0e 94 10 03 	call	0x620	; 0x620 <SEVSENSEGMENT_OFF>
 2de:	08 95       	ret

000002e0 <__vector_3>:
	}
}


// Handle ON/OFF Button
ISR(INT2_vect) {
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	
	g_HeaterState = !g_HeaterState;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <g_HeaterState>
 308:	91 11       	cpse	r25, r1
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <g_HeaterState>

	if (g_HeaterState == 0) {
 310:	81 11       	cpse	r24, r1
 312:	03 c0       	rjmp	.+6      	; 0x31a <__vector_3+0x3a>
		System_Off();
 314:	0e 94 63 01 	call	0x2c6	; 0x2c6 <System_Off>
 318:	02 c0       	rjmp	.+4      	; 0x31e <__vector_3+0x3e>
		} else {
		ON_LED_ON();
 31a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <ON_LED_ON>
		
		
	}
}
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <WaterHeater>:
	}
	
}

void WaterHeater(void) {
	System_Initialize();
 340:	0e 94 83 00 	call	0x106	; 0x106 <System_Initialize>
	while (1) { // Run infinitely and check the state 
		if (g_HeaterState)
 344:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
 348:	88 23       	and	r24, r24
 34a:	c9 f0       	breq	.+50     	; 0x37e <WaterHeater+0x3e>
		{		
			ON_LED_ON();
 34c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <ON_LED_ON>
			if (g_BlinkFlag) {
 350:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <g_BlinkFlag>
 354:	88 23       	and	r24, r24
 356:	19 f0       	breq	.+6      	; 0x35e <WaterHeater+0x1e>
				
				SEVSENSEGMENT_OFF();
 358:	0e 94 10 03 	call	0x620	; 0x620 <SEVSENSEGMENT_OFF>
 35c:	0d c0       	rjmp	.+26     	; 0x378 <WaterHeater+0x38>
				
				} else if (g_TemperatureSettingMode) {
 35e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
 362:	88 23       	and	r24, r24
 364:	29 f0       	breq	.+10     	; 0x370 <WaterHeater+0x30>
				
				SEVSENSEGMENT_DisplayNumber(g_SetTemperature);
 366:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 36a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SEVSENSEGMENT_DisplayNumber>
 36e:	04 c0       	rjmp	.+8      	; 0x378 <WaterHeater+0x38>
				
			} else SEVSENSEGMENT_DisplayNumber(g_CurrentTemperature);
 370:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_CurrentTemperature>
 374:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SEVSENSEGMENT_DisplayNumber>
			
			Handle_TemperatureSetting();
 378:	0e 94 56 00 	call	0xac	; 0xac <Handle_TemperatureSetting>
 37c:	e3 cf       	rjmp	.-58     	; 0x344 <WaterHeater+0x4>
			
		} else System_Off(); // Ensure system turns off properly when g_HeaterState = 0
 37e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <System_Off>
 382:	e0 cf       	rjmp	.-64     	; 0x344 <WaterHeater+0x4>

00000384 <heating>:
}


void heating(void){
	static uint8_t count = 0;
	COOLING_LED_OFF();
 384:	0e 94 95 03 	call	0x72a	; 0x72a <COOLING_LED_OFF>
	CoolerRelay_Off();
 388:	0e 94 a7 03 	call	0x74e	; 0x74e <CoolerRelay_Off>
	HeaterRelay_On();
 38c:	0e 94 b3 03 	call	0x766	; 0x766 <HeaterRelay_On>
	if (count >= 50)
 390:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 394:	82 33       	cpi	r24, 0x32	; 50
 396:	20 f0       	brcs	.+8      	; 0x3a0 <heating+0x1c>
	{
		HEATING_LED_TGL();
 398:	0e 94 84 03 	call	0x708	; 0x708 <HEATING_LED_TGL>
		count = 0 ;
 39c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
	count++;
 3a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 3aa:	08 95       	ret

000003ac <cooling>:
}

void cooling(void){
	HEATING_LED_OFF();
 3ac:	0e 94 7e 03 	call	0x6fc	; 0x6fc <HEATING_LED_OFF>
	HeaterRelay_Off();
 3b0:	0e 94 b9 03 	call	0x772	; 0x772 <HeaterRelay_Off>
	COOLING_LED_ON();
 3b4:	0e 94 8f 03 	call	0x71e	; 0x71e <COOLING_LED_ON>
	CoolerRelay_On();
 3b8:	0e 94 a1 03 	call	0x742	; 0x742 <CoolerRelay_On>
 3bc:	08 95       	ret

000003be <ManageHeating>:

// Temperature sensing every TEMP_SENSING_INTERVAL ms (100ms)
void ManageHeating(void) {
	
	// Read current temperature
	g_CurrentTemperature = LM35_ReadTemperature();
 3be:	0e 94 c4 03 	call	0x788	; 0x788 <LM35_ReadTemperature>
 3c2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_CurrentTemperature>

	// Update temperature history
	g_TempHistory[g_TempIndex] = g_CurrentTemperature;
 3c6:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <g_TempIndex>
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	f9 01       	movw	r30, r18
 3ce:	ec 59       	subi	r30, 0x9C	; 156
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	80 83       	st	Z, r24
	g_TempIndex = (g_TempIndex + 1) % TEMP_HISTORY_SIZE;
 3d4:	c9 01       	movw	r24, r18
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	6a e0       	ldi	r22, 0x0A	; 10
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	0e 94 47 06 	call	0xc8e	; 0xc8e <__divmodhi4>
 3e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_TempIndex>
 3e4:	e4 e6       	ldi	r30, 0x64	; 100
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	4e e6       	ldi	r20, 0x6E	; 110
 3ea:	50 e0       	ldi	r21, 0x00	; 0

	// Calculate average temperature
	uint16_t tempSum = 0;
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < TEMP_HISTORY_SIZE; i++) {
		tempSum += g_TempHistory[i];
 3f0:	81 91       	ld	r24, Z+
 3f2:	28 0f       	add	r18, r24
 3f4:	31 1d       	adc	r19, r1
	g_TempHistory[g_TempIndex] = g_CurrentTemperature;
	g_TempIndex = (g_TempIndex + 1) % TEMP_HISTORY_SIZE;

	// Calculate average temperature
	uint16_t tempSum = 0;
	for (uint8_t i = 0; i < TEMP_HISTORY_SIZE; i++) {
 3f6:	e4 17       	cp	r30, r20
 3f8:	f5 07       	cpc	r31, r21
 3fa:	d1 f7       	brne	.-12     	; 0x3f0 <ManageHeating+0x32>
		tempSum += g_TempHistory[i];
	}
	uint8_t g_AvergeTemperature = tempSum / TEMP_HISTORY_SIZE;
 3fc:	ad ec       	ldi	r26, 0xCD	; 205
 3fe:	bc ec       	ldi	r27, 0xCC	; 204
 400:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	99 27       	eor	r25, r25

	// Control logic
	if (g_AvergeTemperature > (g_SetTemperature - 5) && !g_heating) {
 412:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	a9 01       	movw	r20, r18
 41a:	45 50       	subi	r20, 0x05	; 5
 41c:	51 09       	sbc	r21, r1
 41e:	48 17       	cp	r20, r24
 420:	59 07       	cpc	r21, r25
 422:	4c f4       	brge	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 424:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <g_heating>
 428:	41 11       	cpse	r20, r1
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		cooling();
 42c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <cooling>
		g_heating = 0;
 430:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <g_heating>
 434:	08 95       	ret
		} else if (g_AvergeTemperature < (g_SetTemperature + 5)) {
 436:	2b 5f       	subi	r18, 0xFB	; 251
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	82 17       	cp	r24, r18
 43c:	93 07       	cpc	r25, r19
 43e:	34 f4       	brge	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		heating();
 440:	0e 94 c2 01 	call	0x384	; 0x384 <heating>
		g_heating = 1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <g_heating>
 44a:	08 95       	ret
		} else {
		HeaterRelay_Off();
 44c:	0e 94 b9 03 	call	0x772	; 0x772 <HeaterRelay_Off>
		HEATING_LED_OFF();
 450:	0e 94 7e 03 	call	0x6fc	; 0x6fc <HEATING_LED_OFF>
		CoolerRelay_Off();
 454:	0e 94 a7 03 	call	0x74e	; 0x74e <CoolerRelay_Off>
		COOLING_LED_OFF();
 458:	0e 94 95 03 	call	0x72a	; 0x72a <COOLING_LED_OFF>
		g_heating = 0;
 45c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <g_heating>
 460:	08 95       	ret

00000462 <__vector_11>:
// ISR for Timer0 
extern uint32_t _T0_OVF_Count  ;
extern uint8_t  _T0_OVF_iValue ;

ISR(TIMER0_OVF_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	g_Ticks++;
 484:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
 488:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
 48c:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
 490:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	a1 1d       	adc	r26, r1
 498:	b1 1d       	adc	r27, r1
 49a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_Ticks>
 49e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_Ticks+0x1>
 4a2:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <g_Ticks+0x2>
 4a6:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <g_Ticks+0x3>
	_T0_OVF_TCNT0 = _T0_OVF_iValue;
 4aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <_T0_OVF_iValue>
 4ae:	82 bf       	out	0x32, r24	; 50
	if (g_HeaterState)
 4b0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
 4b4:	88 23       	and	r24, r24
 4b6:	f9 f0       	breq	.+62     	; 0x4f6 <__vector_11+0x94>
	{
		ManageHeating();   // Read temp and manage heating
 4b8:	0e 94 df 01 	call	0x3be	; 0x3be <ManageHeating>
		
		if (g_Ticks % (DISPLAY_BLINK_INTERVAL / 10) == 0 && g_TemperatureSettingMode)
 4bc:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <g_Ticks>
 4c0:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <g_Ticks+0x1>
 4c4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <g_Ticks+0x2>
 4c8:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <g_Ticks+0x3>
 4cc:	24 e6       	ldi	r18, 0x64	; 100
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	50 e0       	ldi	r21, 0x00	; 0
 4d4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__udivmodsi4>
 4d8:	67 2b       	or	r22, r23
 4da:	68 2b       	or	r22, r24
 4dc:	69 2b       	or	r22, r25
 4de:	59 f4       	brne	.+22     	; 0x4f6 <__vector_11+0x94>
 4e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
 4e4:	88 23       	and	r24, r24
 4e6:	39 f0       	breq	.+14     	; 0x4f6 <__vector_11+0x94>
		{
			g_BlinkFlag = !g_BlinkFlag;  //Blink the 7SEG
 4e8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <g_BlinkFlag>
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	91 11       	cpse	r25, r1
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <g_BlinkFlag>
		}
		
	}
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <SEVSENSEGMENT_Initialize>:
{
	DIO_SetPinValue(SEVESEG_CONTROL_PORT, SEVSEG_CONTROL_DIP, SEVSEG_HIGH);
}
void SEVSENSEGMENT_DisableDecimalPoint(void)
{
	DIO_SetPinValue(SEVESEG_CONTROL_PORT, SEVSEG_CONTROL_DIP, SEVSEG_LOW);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	64 e0       	ldi	r22, 0x04	; 4
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	65 e0       	ldi	r22, 0x05	; 5
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	66 e0       	ldi	r22, 0x06	; 6
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	67 e0       	ldi	r22, 0x07	; 7
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	63 e0       	ldi	r22, 0x03	; 3
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 55e:	08 95       	ret

00000560 <SEVSENSEGMENT_EnableSegment1>:
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	65 e0       	ldi	r22, 0x05	; 5
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 574:	08 95       	ret

00000576 <SEVSENSEGMENT_DisableSegment1>:
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	65 e0       	ldi	r22, 0x05	; 5
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 58a:	08 95       	ret

0000058c <SEVSENSEGMENT_EnableSegment2>:
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	62 e0       	ldi	r22, 0x02	; 2
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	65 e0       	ldi	r22, 0x05	; 5
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 5a0:	08 95       	ret

000005a2 <SEVSENSEGMENT_DisableSegment2>:
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	62 e0       	ldi	r22, 0x02	; 2
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	65 e0       	ldi	r22, 0x05	; 5
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 5b6:	08 95       	ret

000005b8 <SEVSENSEGMENT_DisplayNumber>:
}

void SEVSENSEGMENT_DisplayNumber(uint8_t number)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	d8 2f       	mov	r29, r24
	uint8_t tens  =  number /10 ;
 5be:	cd ec       	ldi	r28, 0xCD	; 205
 5c0:	8c 9f       	mul	r24, r28
 5c2:	c1 2d       	mov	r28, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	c6 95       	lsr	r28
 5c8:	c6 95       	lsr	r28
 5ca:	c6 95       	lsr	r28
	uint8_t units = number %10;


	SEVSEG_PORT = tens << 4;
 5cc:	8c 2f       	mov	r24, r28
 5ce:	82 95       	swap	r24
 5d0:	80 7f       	andi	r24, 0xF0	; 240
 5d2:	8b bb       	out	0x1b, r24	; 27
	SEVSENSEGMENT_EnableSegment1();
 5d4:	0e 94 b0 02 	call	0x560	; 0x560 <SEVSENSEGMENT_EnableSegment1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d8:	2f ef       	ldi	r18, 0xFF	; 255
 5da:	84 e6       	ldi	r24, 0x64	; 100
 5dc:	94 e0       	ldi	r25, 0x04	; 4
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	90 40       	sbci	r25, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <SEVSENSEGMENT_DisplayNumber+0x26>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <SEVSENSEGMENT_DisplayNumber+0x30>
 5e8:	00 00       	nop
	_delay_ms(90);
	SEVSENSEGMENT_DisableSegment1();
 5ea:	0e 94 bb 02 	call	0x576	; 0x576 <SEVSENSEGMENT_DisableSegment1>
}

void SEVSENSEGMENT_DisplayNumber(uint8_t number)
{
	uint8_t tens  =  number /10 ;
	uint8_t units = number %10;
 5ee:	cc 0f       	add	r28, r28
 5f0:	8c 2f       	mov	r24, r28
 5f2:	88 0f       	add	r24, r24
 5f4:	88 0f       	add	r24, r24
 5f6:	c8 0f       	add	r28, r24
 5f8:	dc 1b       	sub	r29, r28
	SEVSEG_PORT = tens << 4;
	SEVSENSEGMENT_EnableSegment1();
	_delay_ms(90);
	SEVSENSEGMENT_DisableSegment1();
	
	SEVSEG_PORT = units << 4;
 5fa:	d2 95       	swap	r29
 5fc:	d0 7f       	andi	r29, 0xF0	; 240
 5fe:	db bb       	out	0x1b, r29	; 27
	SEVSENSEGMENT_EnableSegment2();
 600:	0e 94 c6 02 	call	0x58c	; 0x58c <SEVSENSEGMENT_EnableSegment2>
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	84 e6       	ldi	r24, 0x64	; 100
 608:	94 e0       	ldi	r25, 0x04	; 4
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <SEVSENSEGMENT_DisplayNumber+0x52>
 612:	00 c0       	rjmp	.+0      	; 0x614 <SEVSENSEGMENT_DisplayNumber+0x5c>
 614:	00 00       	nop
	_delay_ms(90);
	SEVSENSEGMENT_DisableSegment2();
 616:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <SEVSENSEGMENT_DisableSegment2>
}
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <SEVSENSEGMENT_OFF>:

void SEVSENSEGMENT_OFF(void)
{
	 SEVSENSEGMENT_DisableSegment1();
 620:	0e 94 bb 02 	call	0x576	; 0x576 <SEVSENSEGMENT_DisableSegment1>
	 SEVSENSEGMENT_DisableSegment2();
 624:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <SEVSENSEGMENT_DisableSegment2>
 628:	08 95       	ret

0000062a <EEPROM_Initialize>:
#include "TWI_Interface.h"
//#include "LCD_Interface.h"	

void EEPROM_Initialize(void)
{
	TWI_voidPeripheralInitialize(_TWI_SlaveAddress0);
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 0f 04 	call	0x81e	; 0x81e <TWI_voidPeripheralInitialize>
 630:	08 95       	ret

00000632 <EEPROM_Write_DataByte>:
}
// Write byte
void EEPROM_Write_DataByte(uint16_t wordAddress, uint8_t dataTransmit)
{
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	18 2f       	mov	r17, r24
 63a:	c9 2f       	mov	r28, r25
 63c:	d6 2f       	mov	r29, r22
	uint8_t wordAddressL = wordAddress;
	uint8_t wordAddressH = (((wordAddress>>8)&0x07) | 0x50);
	TWI_voidMasterSendStartCondition();
 63e:	0e 94 1c 04 	call	0x838	; 0x838 <TWI_voidMasterSendStartCondition>
}
// Write byte
void EEPROM_Write_DataByte(uint16_t wordAddress, uint8_t dataTransmit)
{
	uint8_t wordAddressL = wordAddress;
	uint8_t wordAddressH = (((wordAddress>>8)&0x07) | 0x50);
 642:	8c 2f       	mov	r24, r28
 644:	87 70       	andi	r24, 0x07	; 7
	TWI_voidMasterSendStartCondition();
	
	TWI_voidMasterSendSlaveAddressWithWriteOperation(wordAddressH);
 646:	80 65       	ori	r24, 0x50	; 80
 648:	0e 94 39 04 	call	0x872	; 0x872 <TWI_voidMasterSendSlaveAddressWithWriteOperation>
	
	TWI_voidMasterTransmitDataByteWithACK(wordAddressL);
 64c:	81 2f       	mov	r24, r17
 64e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <TWI_voidMasterTransmitDataByteWithACK>
	
	TWI_voidMasterTransmitDataByteWithACK(dataTransmit);
 652:	8d 2f       	mov	r24, r29
 654:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <TWI_voidMasterTransmitDataByteWithACK>
	
	TWI_voidMasterSendStopCondition();
 658:	0e 94 2c 04 	call	0x858	; 0x858 <TWI_voidMasterSendStopCondition>
 65c:	8f e1       	ldi	r24, 0x1F	; 31
 65e:	9e e4       	ldi	r25, 0x4E	; 78
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <EEPROM_Write_DataByte+0x2e>
 664:	00 c0       	rjmp	.+0      	; 0x666 <EEPROM_Write_DataByte+0x34>
 666:	00 00       	nop
	
	_delay_ms(5);
	return;
}
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	08 95       	ret

00000670 <EEPROM_Read_DataByte>:
// Random read byte
uint8_t EEPROM_Read_DataByte(uint16_t wordAddress)
{
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	1f 92       	push	r1
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
 67e:	08 2f       	mov	r16, r24
	
	uint8_t dataReceived = 0;
 680:	19 82       	std	Y+1, r1	; 0x01
	uint8_t wordAddressL = wordAddress;
	uint8_t wordAddressH = (wordAddress >> 8) | 0x50;
 682:	19 2f       	mov	r17, r25
 684:	10 65       	ori	r17, 0x50	; 80
	
	TWI_voidPeripheralInitialize(_TWI_SlaveAddress0);
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 0f 04 	call	0x81e	; 0x81e <TWI_voidPeripheralInitialize>
	
	TWI_voidMasterSendStartCondition();
 68c:	0e 94 1c 04 	call	0x838	; 0x838 <TWI_voidMasterSendStartCondition>
	
	
	TWI_voidMasterSendSlaveAddressWithWriteOperation(wordAddressH);
 690:	81 2f       	mov	r24, r17
 692:	0e 94 39 04 	call	0x872	; 0x872 <TWI_voidMasterSendSlaveAddressWithWriteOperation>
	
	
	TWI_voidMasterTransmitDataByteWithACK(wordAddressL);
 696:	80 2f       	mov	r24, r16
 698:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <TWI_voidMasterTransmitDataByteWithACK>
	
	
	TWI_voidMasterSendRepeatedStartCondition();
 69c:	0e 94 2f 04 	call	0x85e	; 0x85e <TWI_voidMasterSendRepeatedStartCondition>
	
	
	TWI_voidMasterSendSlaveAddressWithReadOperation(wordAddressH);
 6a0:	81 2f       	mov	r24, r17
 6a2:	0e 94 4b 04 	call	0x896	; 0x896 <TWI_voidMasterSendSlaveAddressWithReadOperation>
	
	
	TWI_voidMasterReceiveDataByteWithNoACK(&dataReceived);
 6a6:	ce 01       	movw	r24, r28
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	0e 94 67 04 	call	0x8ce	; 0x8ce <TWI_voidMasterReceiveDataByteWithNoACK>
	
	
	TWI_voidMasterSendStopCondition();
 6ae:	0e 94 2c 04 	call	0x858	; 0x858 <TWI_voidMasterSendStopCondition>
 6b2:	8f e1       	ldi	r24, 0x1F	; 31
 6b4:	9e e4       	ldi	r25, 0x4E	; 78
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <EEPROM_Read_DataByte+0x46>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <EEPROM_Read_DataByte+0x4c>
 6bc:	00 00       	nop
	
	
	_delay_ms(5);
	return dataReceived;
 6be:	89 81       	ldd	r24, Y+1	; 0x01
 6c0:	0f 90       	pop	r0
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <ON_LED_Initialize>:

#include "ON_LED_Interface.h"

void ON_LED_Initialize(void)
{
	DIO_SetPinDirection(ON_LED_PORT, ON_LED, ON_LED_OUTPUT);
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	64 e0       	ldi	r22, 0x04	; 4
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 6d6:	08 95       	ret

000006d8 <ON_LED_ON>:
}
void ON_LED_ON(void)
{
	DIO_SetPinValue(ON_LED_PORT, ON_LED, ON_LED_HIGH);
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	64 e0       	ldi	r22, 0x04	; 4
 6dc:	83 e0       	ldi	r24, 0x03	; 3
 6de:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 6e2:	08 95       	ret

000006e4 <ON_LED_OFF>:
}
void ON_LED_OFF(void)
{
	DIO_SetPinValue(ON_LED_PORT, ON_LED, ON_LED_LOW);
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 6ee:	08 95       	ret

000006f0 <HEATING_LED_Initialize>:
{
	DIO_SetPinDirection(HEATING_LED_PORT, HEATING_LED, HEATING_LED_OUTPUT);
}
void HEATING_LED_ON(void)
{
	DIO_SetPinValue(HEATING_LED_PORT, HEATING_LED, HEATING_LED_HIGH);
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	83 e0       	ldi	r24, 0x03	; 3
 6f6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 6fa:	08 95       	ret

000006fc <HEATING_LED_OFF>:
}
void HEATING_LED_OFF(void)
{
	DIO_SetPinValue(HEATING_LED_PORT, HEATING_LED, HEATING_LED_LOW);
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	83 e0       	ldi	r24, 0x03	; 3
 702:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 706:	08 95       	ret

00000708 <HEATING_LED_TGL>:
}

void HEATING_LED_TGL(void)
{
	DIO_TogglePinDirection(HEATING_LED_PORT, HEATING_LED);
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	83 e0       	ldi	r24, 0x03	; 3
 70c:	0e 94 56 05 	call	0xaac	; 0xaac <DIO_TogglePinDirection>
 710:	08 95       	ret

00000712 <COOLING_LED_Initialize>:

#include "COOLING_LED_Interface.h"

void COOLING_LED_Initialize(void)
{
	DIO_SetPinDirection(COOLING_LED_PORT, COOLING_LED, COOLING_LED_OUTPUT);
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 71c:	08 95       	ret

0000071e <COOLING_LED_ON>:
}
void COOLING_LED_ON(void)
{
	DIO_SetPinValue(COOLING_LED_PORT, COOLING_LED, COOLING_LED_HIGH);
 71e:	41 e0       	ldi	r20, 0x01	; 1
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	83 e0       	ldi	r24, 0x03	; 3
 724:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 728:	08 95       	ret

0000072a <COOLING_LED_OFF>:
}
void COOLING_LED_OFF(void)
{
	DIO_SetPinValue(COOLING_LED_PORT, COOLING_LED, COOLING_LED_LOW);
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 734:	08 95       	ret

00000736 <CoolerRelay_Initialize>:


#include "CoolerRelay_Interface.h"

void CoolerRelay_Initialize(void){
	DIO_SetPinDirection(CoolerRelay_PORT, CoolerRelay, CoolerRelay_OUTPUT);
 736:	41 e0       	ldi	r20, 0x01	; 1
 738:	67 e0       	ldi	r22, 0x07	; 7
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 740:	08 95       	ret

00000742 <CoolerRelay_On>:
}
void CoolerRelay_On(void){
	DIO_SetPinValue(CoolerRelay_PORT, CoolerRelay, CoolerRelay_HIGH);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	67 e0       	ldi	r22, 0x07	; 7
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 74c:	08 95       	ret

0000074e <CoolerRelay_Off>:
}
void CoolerRelay_Off(void){
	DIO_SetPinValue(CoolerRelay_PORT, CoolerRelay, CoolerRelay_LOW);
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	67 e0       	ldi	r22, 0x07	; 7
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 758:	08 95       	ret

0000075a <HeaterRelay_Initialize>:


#include "HeaterRelay_Interface.h"

void HeaterRelay_Initialize(void){
	DIO_SetPinDirection(HeaterRelay_PORT, HeaterRelay, HeaterRelay_OUTPUT);
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	66 e0       	ldi	r22, 0x06	; 6
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_SetPinDirection>
 764:	08 95       	ret

00000766 <HeaterRelay_On>:

}
void HeaterRelay_On(void){
	DIO_SetPinValue(HeaterRelay_PORT, HeaterRelay, HeaterRelay_HIGH);
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	66 e0       	ldi	r22, 0x06	; 6
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 770:	08 95       	ret

00000772 <HeaterRelay_Off>:
}
void HeaterRelay_Off(void){
	DIO_SetPinValue(HeaterRelay_PORT, HeaterRelay, HeaterRelay_LOW);
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	66 e0       	ldi	r22, 0x06	; 6
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_SetPinValue>
 77c:	08 95       	ret

0000077e <LM35_Initialize>:
 */ 

#include "LM35_Interface.h"
void LM35_Initialize(void) {
	// Initialize the ADC module with configured reference voltage and prescaler
	ADC_Initialize_WithoutInterrupt(LM35_ADC_VREF, LM35_ADC_PRESCALER);
 77e:	66 e0       	ldi	r22, 0x06	; 6
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 dd 03 	call	0x7ba	; 0x7ba <ADC_Initialize_WithoutInterrupt>
 786:	08 95       	ret

00000788 <LM35_ReadTemperature>:
}

uint16_t LM35_ReadTemperature(void) {
	// Read the ADC value from the configured channel
	uint16_t adcValue = ADC_Read(LM35_ADC_CHANNEL);
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ADC_Read>

	// Convert ADC value to temperature in millivolts
	uint32_t millivolts = ((uint32_t)adcValue * 5000) / 1024;
 78e:	9c 01       	movw	r18, r24
 790:	a8 e8       	ldi	r26, 0x88	; 136
 792:	b3 e1       	ldi	r27, 0x13	; 19
 794:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
 798:	05 2e       	mov	r0, r21
 79a:	5a e0       	ldi	r21, 0x0A	; 10
 79c:	96 95       	lsr	r25
 79e:	87 95       	ror	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	5a 95       	dec	r21
 7a6:	d1 f7       	brne	.-12     	; 0x79c <LM35_ReadTemperature+0x14>
 7a8:	50 2d       	mov	r21, r0

	// Convert millivolts to temperature (10mV per degree Celsius for LM35)
	uint16_t temperature = millivolts / 10;
 7aa:	2a e0       	ldi	r18, 0x0A	; 10
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__udivmodsi4>

	return temperature;
 7b6:	c9 01       	movw	r24, r18
 7b8:	08 95       	ret

000007ba <ADC_Initialize_WithoutInterrupt>:
void ADC_Initialize_WithInterrupt(adc_vref vref, adc_prescaler prescaler) {
	// Set reference voltage
	_ADC_ADMUX = (vref << 6); // Bits 7:6 for VREF

	// Enable ADC, set prescaler, and enable interrupts
	_ADC_ADCSRA = (1 << ADEN) | (1 << ADIE) | (prescaler & 0x07); // Bits 2:0 for prescaler
 7ba:	82 95       	swap	r24
 7bc:	88 0f       	add	r24, r24
 7be:	88 0f       	add	r24, r24
 7c0:	80 7c       	andi	r24, 0xC0	; 192
 7c2:	87 b9       	out	0x07, r24	; 7
 7c4:	67 70       	andi	r22, 0x07	; 7
 7c6:	60 68       	ori	r22, 0x80	; 128
 7c8:	66 b9       	out	0x06, r22	; 6
 7ca:	08 95       	ret

000007cc <ADC_Read>:
	3- Start conversion
	4- Wait until end conversion
	5- Return reading
	*/
	uint16_t ADC_read = 0;
	switch (channel)
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	88 30       	cpi	r24, 0x08	; 8
 7d0:	91 05       	cpc	r25, r1
 7d2:	e8 f4       	brcc	.+58     	; 0x80e <ADC_Read+0x42>
 7d4:	fc 01       	movw	r30, r24
 7d6:	e6 5d       	subi	r30, 0xD6	; 214
 7d8:	ff 4f       	sbci	r31, 0xFF	; 255
 7da:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__tablejump2__>
	{
		case ADC_channel_0:
		_ADC_ADMUX = 0x40;//0b 010 00000
 7de:	80 e4       	ldi	r24, 0x40	; 64
 7e0:	87 b9       	out	0x07, r24	; 7
		break;
 7e2:	17 c0       	rjmp	.+46     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_1:
		_ADC_ADMUX = 0x41;//0b 010 00001
 7e4:	81 e4       	ldi	r24, 0x41	; 65
 7e6:	87 b9       	out	0x07, r24	; 7
		break;
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_2:
		_ADC_ADMUX = 0x42;//0b 010 00010
 7ea:	82 e4       	ldi	r24, 0x42	; 66
 7ec:	87 b9       	out	0x07, r24	; 7
		break;
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_3:
		_ADC_ADMUX = 0x43;//0b 010 00011
 7f0:	83 e4       	ldi	r24, 0x43	; 67
 7f2:	87 b9       	out	0x07, r24	; 7
		break;
 7f4:	0e c0       	rjmp	.+28     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_4:
		_ADC_ADMUX = 0x44;//0b 010 00100
 7f6:	84 e4       	ldi	r24, 0x44	; 68
 7f8:	87 b9       	out	0x07, r24	; 7
		break;
 7fa:	0b c0       	rjmp	.+22     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_5:
		_ADC_ADMUX = 0x45;//0b 010 00101
 7fc:	85 e4       	ldi	r24, 0x45	; 69
 7fe:	87 b9       	out	0x07, r24	; 7
		break;
 800:	08 c0       	rjmp	.+16     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_6:
		_ADC_ADMUX = 0x46;//0b 010 00110
 802:	86 e4       	ldi	r24, 0x46	; 70
 804:	87 b9       	out	0x07, r24	; 7
		break;
 806:	05 c0       	rjmp	.+10     	; 0x812 <ADC_Read+0x46>
		case ADC_channel_7:
		_ADC_ADMUX = 0x47;//0b 0100 0111
 808:	87 e4       	ldi	r24, 0x47	; 71
 80a:	87 b9       	out	0x07, r24	; 7
		break;
 80c:	02 c0       	rjmp	.+4      	; 0x812 <ADC_Read+0x46>
		default:
		_ADC_ADMUX = 0x40;
 80e:	80 e4       	ldi	r24, 0x40	; 64
 810:	87 b9       	out	0x07, r24	; 7
		break;
	}
	_ADC_ADCSRA |= (1<<ADSC);
 812:	36 9a       	sbi	0x06, 6	; 6
	while (get_bit(_ADC_ADCSRA, ADIF) != 1);
 814:	34 9b       	sbis	0x06, 4	; 6
 816:	fe cf       	rjmp	.-4      	; 0x814 <ADC_Read+0x48>
	ADC_read = _ADC_DATA;
 818:	84 b1       	in	r24, 0x04	; 4
 81a:	95 b1       	in	r25, 0x05	; 5
	return ADC_read;
 81c:	08 95       	ret

0000081e <TWI_voidPeripheralInitialize>:
{
	_TWI_TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT); // Reinitialize flag + Enable TWI + Enable Acknowledgment
	while (get_bit(_TWI_TWCR, TWINT) != 1);         // Wait until job finish
	while((TWSR & 0xF8) != MASTER_RD_BYTE_ACK);     // Wait until receive write acknowledgment
	_TWI_TWCR &=~(1<<TWEA);                         // Disable acknowledgment
	*dataReceived = _TWI_TWDR;                      // Read received data
 81e:	91 b1       	in	r25, 0x01	; 1
 820:	9c 7f       	andi	r25, 0xFC	; 252
 822:	91 b9       	out	0x01, r25	; 1
 824:	90 b1       	in	r25, 0x00	; 0
 826:	9c 60       	ori	r25, 0x0C	; 12
 828:	90 b9       	out	0x00, r25	; 0
 82a:	88 0f       	add	r24, r24
 82c:	81 60       	ori	r24, 0x01	; 1
 82e:	82 b9       	out	0x02, r24	; 2
 830:	86 b7       	in	r24, 0x36	; 54
 832:	84 6c       	ori	r24, 0xC4	; 196
 834:	86 bf       	out	0x36, r24	; 54
 836:	08 95       	ret

00000838 <TWI_voidMasterSendStartCondition>:
 838:	84 ea       	ldi	r24, 0xA4	; 164
 83a:	86 bf       	out	0x36, r24	; 54
 83c:	06 b6       	in	r0, 0x36	; 54
 83e:	07 fe       	sbrs	r0, 7
 840:	fd cf       	rjmp	.-6      	; 0x83c <TWI_voidMasterSendStartCondition+0x4>
 842:	81 b1       	in	r24, 0x01	; 1
 844:	88 7f       	andi	r24, 0xF8	; 248
 846:	88 30       	cpi	r24, 0x08	; 8
 848:	e1 f7       	brne	.-8      	; 0x842 <TWI_voidMasterSendStartCondition+0xa>
 84a:	8f e1       	ldi	r24, 0x1F	; 31
 84c:	9e e4       	ldi	r25, 0x4E	; 78
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	f1 f7       	brne	.-4      	; 0x84e <TWI_voidMasterSendStartCondition+0x16>
 852:	00 c0       	rjmp	.+0      	; 0x854 <TWI_voidMasterSendStartCondition+0x1c>
 854:	00 00       	nop
 856:	08 95       	ret

00000858 <TWI_voidMasterSendStopCondition>:
 858:	84 e9       	ldi	r24, 0x94	; 148
 85a:	86 bf       	out	0x36, r24	; 54
 85c:	08 95       	ret

0000085e <TWI_voidMasterSendRepeatedStartCondition>:
 85e:	84 ea       	ldi	r24, 0xA4	; 164
 860:	86 bf       	out	0x36, r24	; 54
 862:	06 b6       	in	r0, 0x36	; 54
 864:	07 fe       	sbrs	r0, 7
 866:	fd cf       	rjmp	.-6      	; 0x862 <__stack+0x3>
 868:	81 b1       	in	r24, 0x01	; 1
 86a:	88 7f       	andi	r24, 0xF8	; 248
 86c:	80 31       	cpi	r24, 0x10	; 16
 86e:	e1 f7       	brne	.-8      	; 0x868 <__stack+0x9>
 870:	08 95       	ret

00000872 <TWI_voidMasterSendSlaveAddressWithWriteOperation>:
 872:	88 23       	and	r24, r24
 874:	7c f0       	brlt	.+30     	; 0x894 <TWI_voidMasterSendSlaveAddressWithWriteOperation+0x22>
 876:	88 0f       	add	r24, r24
 878:	83 b9       	out	0x03, r24	; 3
 87a:	86 b7       	in	r24, 0x36	; 54
 87c:	8f 7d       	andi	r24, 0xDF	; 223
 87e:	86 bf       	out	0x36, r24	; 54
 880:	86 b7       	in	r24, 0x36	; 54
 882:	84 68       	ori	r24, 0x84	; 132
 884:	86 bf       	out	0x36, r24	; 54
 886:	06 b6       	in	r0, 0x36	; 54
 888:	07 fe       	sbrs	r0, 7
 88a:	fd cf       	rjmp	.-6      	; 0x886 <TWI_voidMasterSendSlaveAddressWithWriteOperation+0x14>
 88c:	81 b1       	in	r24, 0x01	; 1
 88e:	88 7f       	andi	r24, 0xF8	; 248
 890:	88 31       	cpi	r24, 0x18	; 24
 892:	e1 f7       	brne	.-8      	; 0x88c <TWI_voidMasterSendSlaveAddressWithWriteOperation+0x1a>
 894:	08 95       	ret

00000896 <TWI_voidMasterSendSlaveAddressWithReadOperation>:
 896:	88 23       	and	r24, r24
 898:	6c f0       	brlt	.+26     	; 0x8b4 <TWI_voidMasterSendSlaveAddressWithReadOperation+0x1e>
 89a:	88 0f       	add	r24, r24
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	83 b9       	out	0x03, r24	; 3
 8a0:	86 b7       	in	r24, 0x36	; 54
 8a2:	84 6a       	ori	r24, 0xA4	; 164
 8a4:	86 bf       	out	0x36, r24	; 54
 8a6:	06 b6       	in	r0, 0x36	; 54
 8a8:	07 fe       	sbrs	r0, 7
 8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <TWI_voidMasterSendSlaveAddressWithReadOperation+0x10>
 8ac:	81 b1       	in	r24, 0x01	; 1
 8ae:	88 7f       	andi	r24, 0xF8	; 248
 8b0:	80 34       	cpi	r24, 0x40	; 64
 8b2:	e1 f7       	brne	.-8      	; 0x8ac <TWI_voidMasterSendSlaveAddressWithReadOperation+0x16>
 8b4:	08 95       	ret

000008b6 <TWI_voidMasterTransmitDataByteWithACK>:
 8b6:	83 b9       	out	0x03, r24	; 3
 8b8:	86 b7       	in	r24, 0x36	; 54
 8ba:	84 68       	ori	r24, 0x84	; 132
 8bc:	86 bf       	out	0x36, r24	; 54
 8be:	06 b6       	in	r0, 0x36	; 54
 8c0:	07 fe       	sbrs	r0, 7
 8c2:	fd cf       	rjmp	.-6      	; 0x8be <TWI_voidMasterTransmitDataByteWithACK+0x8>
 8c4:	81 b1       	in	r24, 0x01	; 1
 8c6:	88 7f       	andi	r24, 0xF8	; 248
 8c8:	88 32       	cpi	r24, 0x28	; 40
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <TWI_voidMasterTransmitDataByteWithACK+0xe>
 8cc:	08 95       	ret

000008ce <TWI_voidMasterReceiveDataByteWithNoACK>:
}

void TWI_voidMasterReceiveDataByteWithNoACK(uint8_t* dataReceived)
{
 8ce:	fc 01       	movw	r30, r24
	  // Enable TWI and clear interrupt flag
	  _TWI_TWCR = (1 << TWEN) | (1 << TWINT);
 8d0:	84 e8       	ldi	r24, 0x84	; 132
 8d2:	86 bf       	out	0x36, r24	; 54

	  // Wait until TWI finishes the operation
	  while (get_bit(_TWI_TWCR, TWINT) != 1);
 8d4:	06 b6       	in	r0, 0x36	; 54
 8d6:	07 fe       	sbrs	r0, 7
 8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <TWI_voidMasterReceiveDataByteWithNoACK+0x6>

	   //Check for successful data reception without acknowledgment
	  while ((_TWI_TWSR & 0xF8) != 0x58) {  // 0x58 is the expected status for no ACK after byte read
 8da:	91 b1       	in	r25, 0x01	; 1
 8dc:	98 7f       	andi	r25, 0xF8	; 248
 8de:	98 35       	cpi	r25, 0x58	; 88
 8e0:	e1 f7       	brne	.-8      	; 0x8da <TWI_voidMasterReceiveDataByteWithNoACK+0xc>
		  // Optionally handle timeout or error
	  }

	  // Store received data
	  *dataReceived = _TWI_TWDR;
 8e2:	83 b1       	in	r24, 0x03	; 3
 8e4:	80 83       	st	Z, r24
 8e6:	08 95       	ret

000008e8 <DIO_SetPinDirection>:
#include "DIO_Interface.h"

// MicroController pin direction
void DIO_SetPinDirection(dioPort port, dioPin pin, dioState state)
{
	switch (state)
 8e8:	44 23       	and	r20, r20
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <DIO_SetPinDirection+0xa>
 8ec:	41 30       	cpi	r20, 0x01	; 1
 8ee:	c9 f1       	breq	.+114    	; 0x962 <DIO_SetPinDirection+0x7a>
 8f0:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
 8f2:	81 30       	cpi	r24, 0x01	; 1
 8f4:	91 f0       	breq	.+36     	; 0x91a <DIO_SetPinDirection+0x32>
 8f6:	28 f0       	brcs	.+10     	; 0x902 <DIO_SetPinDirection+0x1a>
 8f8:	82 30       	cpi	r24, 0x02	; 2
 8fa:	d9 f0       	breq	.+54     	; 0x932 <DIO_SetPinDirection+0x4a>
 8fc:	83 30       	cpi	r24, 0x03	; 3
 8fe:	29 f1       	breq	.+74     	; 0x94a <DIO_SetPinDirection+0x62>
 900:	08 95       	ret
		{
			case DIO_PORTA: clr_bit(_DIO_DDRA, pin); break;
 902:	2a b3       	in	r18, 0x1a	; 26
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <DIO_SetPinDirection+0x26>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	6a 95       	dec	r22
 910:	e2 f7       	brpl	.-8      	; 0x90a <DIO_SetPinDirection+0x22>
 912:	80 95       	com	r24
 914:	82 23       	and	r24, r18
 916:	8a bb       	out	0x1a, r24	; 26
 918:	08 95       	ret
			case DIO_PORTB: clr_bit(_DIO_DDRB, pin); break;
 91a:	27 b3       	in	r18, 0x17	; 23
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_SetPinDirection+0x3e>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	6a 95       	dec	r22
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_SetPinDirection+0x3a>
 92a:	80 95       	com	r24
 92c:	82 23       	and	r24, r18
 92e:	87 bb       	out	0x17, r24	; 23
 930:	08 95       	ret
			case DIO_PORTC: clr_bit(_DIO_DDRC, pin); break;
 932:	24 b3       	in	r18, 0x14	; 20
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_SetPinDirection+0x56>
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	6a 95       	dec	r22
 940:	e2 f7       	brpl	.-8      	; 0x93a <DIO_SetPinDirection+0x52>
 942:	80 95       	com	r24
 944:	82 23       	and	r24, r18
 946:	84 bb       	out	0x14, r24	; 20
 948:	08 95       	ret
			case DIO_PORTD: clr_bit(_DIO_DDRD, pin); break;
 94a:	21 b3       	in	r18, 0x11	; 17
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	02 c0       	rjmp	.+4      	; 0x956 <DIO_SetPinDirection+0x6e>
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	6a 95       	dec	r22
 958:	e2 f7       	brpl	.-8      	; 0x952 <DIO_SetPinDirection+0x6a>
 95a:	80 95       	com	r24
 95c:	82 23       	and	r24, r18
 95e:	81 bb       	out	0x11, r24	; 17
 960:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	89 f0       	breq	.+34     	; 0x988 <DIO_SetPinDirection+0xa0>
 966:	28 f0       	brcs	.+10     	; 0x972 <DIO_SetPinDirection+0x8a>
 968:	82 30       	cpi	r24, 0x02	; 2
 96a:	c9 f0       	breq	.+50     	; 0x99e <DIO_SetPinDirection+0xb6>
 96c:	83 30       	cpi	r24, 0x03	; 3
 96e:	11 f1       	breq	.+68     	; 0x9b4 <DIO_SetPinDirection+0xcc>
 970:	08 95       	ret
		{
			case DIO_PORTA: set_bit(_DIO_DDRA, pin); break;
 972:	2a b3       	in	r18, 0x1a	; 26
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_SetPinDirection+0x96>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	6a 95       	dec	r22
 980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_SetPinDirection+0x92>
 982:	82 2b       	or	r24, r18
 984:	8a bb       	out	0x1a, r24	; 26
 986:	08 95       	ret
			case DIO_PORTB: set_bit(_DIO_DDRB, pin); break;
 988:	27 b3       	in	r18, 0x17	; 23
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_SetPinDirection+0xac>
 990:	88 0f       	add	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	6a 95       	dec	r22
 996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_SetPinDirection+0xa8>
 998:	82 2b       	or	r24, r18
 99a:	87 bb       	out	0x17, r24	; 23
 99c:	08 95       	ret
			case DIO_PORTC: set_bit(_DIO_DDRC, pin); break;
 99e:	24 b3       	in	r18, 0x14	; 20
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <DIO_SetPinDirection+0xc2>
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	6a 95       	dec	r22
 9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <DIO_SetPinDirection+0xbe>
 9ae:	82 2b       	or	r24, r18
 9b0:	84 bb       	out	0x14, r24	; 20
 9b2:	08 95       	ret
			case DIO_PORTD: set_bit(_DIO_DDRD, pin); break;
 9b4:	21 b3       	in	r18, 0x11	; 17
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_SetPinDirection+0xd8>
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	6a 95       	dec	r22
 9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_SetPinDirection+0xd4>
 9c4:	82 2b       	or	r24, r18
 9c6:	81 bb       	out	0x11, r24	; 17
 9c8:	08 95       	ret

000009ca <DIO_SetPinValue>:
	}
}
// Pin-Output
void DIO_SetPinValue(dioPort port, dioPin pin, dioStatus status)
{
	switch (status)
 9ca:	44 23       	and	r20, r20
 9cc:	19 f0       	breq	.+6      	; 0x9d4 <DIO_SetPinValue+0xa>
 9ce:	41 30       	cpi	r20, 0x01	; 1
 9d0:	c9 f1       	breq	.+114    	; 0xa44 <DIO_SetPinValue+0x7a>
 9d2:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	91 f0       	breq	.+36     	; 0x9fc <DIO_SetPinValue+0x32>
 9d8:	28 f0       	brcs	.+10     	; 0x9e4 <DIO_SetPinValue+0x1a>
 9da:	82 30       	cpi	r24, 0x02	; 2
 9dc:	d9 f0       	breq	.+54     	; 0xa14 <DIO_SetPinValue+0x4a>
 9de:	83 30       	cpi	r24, 0x03	; 3
 9e0:	29 f1       	breq	.+74     	; 0xa2c <DIO_SetPinValue+0x62>
 9e2:	08 95       	ret
		{
			case DIO_PORTA: clr_bit(_DIO_PORTA, pin); break;
 9e4:	2b b3       	in	r18, 0x1b	; 27
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_SetPinValue+0x26>
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	6a 95       	dec	r22
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_SetPinValue+0x22>
 9f4:	80 95       	com	r24
 9f6:	82 23       	and	r24, r18
 9f8:	8b bb       	out	0x1b, r24	; 27
 9fa:	08 95       	ret
			case DIO_PORTB: clr_bit(_DIO_PORTB, pin); break;
 9fc:	28 b3       	in	r18, 0x18	; 24
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_SetPinValue+0x3e>
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	6a 95       	dec	r22
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_SetPinValue+0x3a>
 a0c:	80 95       	com	r24
 a0e:	82 23       	and	r24, r18
 a10:	88 bb       	out	0x18, r24	; 24
 a12:	08 95       	ret
			case DIO_PORTC: clr_bit(_DIO_PORTC, pin); break;
 a14:	25 b3       	in	r18, 0x15	; 21
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_SetPinValue+0x56>
 a1c:	88 0f       	add	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	6a 95       	dec	r22
 a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_SetPinValue+0x52>
 a24:	80 95       	com	r24
 a26:	82 23       	and	r24, r18
 a28:	85 bb       	out	0x15, r24	; 21
 a2a:	08 95       	ret
			case DIO_PORTD: clr_bit(_DIO_PORTD, pin); break;
 a2c:	22 b3       	in	r18, 0x12	; 18
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_SetPinValue+0x6e>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	6a 95       	dec	r22
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_SetPinValue+0x6a>
 a3c:	80 95       	com	r24
 a3e:	82 23       	and	r24, r18
 a40:	82 bb       	out	0x12, r24	; 18
 a42:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
 a44:	81 30       	cpi	r24, 0x01	; 1
 a46:	89 f0       	breq	.+34     	; 0xa6a <DIO_SetPinValue+0xa0>
 a48:	28 f0       	brcs	.+10     	; 0xa54 <DIO_SetPinValue+0x8a>
 a4a:	82 30       	cpi	r24, 0x02	; 2
 a4c:	c9 f0       	breq	.+50     	; 0xa80 <DIO_SetPinValue+0xb6>
 a4e:	83 30       	cpi	r24, 0x03	; 3
 a50:	11 f1       	breq	.+68     	; 0xa96 <DIO_SetPinValue+0xcc>
 a52:	08 95       	ret
		{
			case DIO_PORTA: set_bit(_DIO_PORTA, pin); break;
 a54:	2b b3       	in	r18, 0x1b	; 27
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_SetPinValue+0x96>
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	6a 95       	dec	r22
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_SetPinValue+0x92>
 a64:	82 2b       	or	r24, r18
 a66:	8b bb       	out	0x1b, r24	; 27
 a68:	08 95       	ret
			case DIO_PORTB: set_bit(_DIO_PORTB, pin); break;
 a6a:	28 b3       	in	r18, 0x18	; 24
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <DIO_SetPinValue+0xac>
 a72:	88 0f       	add	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	6a 95       	dec	r22
 a78:	e2 f7       	brpl	.-8      	; 0xa72 <DIO_SetPinValue+0xa8>
 a7a:	82 2b       	or	r24, r18
 a7c:	88 bb       	out	0x18, r24	; 24
 a7e:	08 95       	ret
			case DIO_PORTC: set_bit(_DIO_PORTC, pin); break;
 a80:	25 b3       	in	r18, 0x15	; 21
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_SetPinValue+0xc2>
 a88:	88 0f       	add	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	6a 95       	dec	r22
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_SetPinValue+0xbe>
 a90:	82 2b       	or	r24, r18
 a92:	85 bb       	out	0x15, r24	; 21
 a94:	08 95       	ret
			case DIO_PORTD: set_bit(_DIO_PORTD, pin); break;
 a96:	22 b3       	in	r18, 0x12	; 18
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_SetPinValue+0xd8>
 a9e:	88 0f       	add	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	6a 95       	dec	r22
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_SetPinValue+0xd4>
 aa6:	82 2b       	or	r24, r18
 aa8:	82 bb       	out	0x12, r24	; 18
 aaa:	08 95       	ret

00000aac <DIO_TogglePinDirection>:
		break;
	}
}
void DIO_TogglePinDirection(dioPort port, dioPin pin)
{
	switch (port)
 aac:	81 30       	cpi	r24, 0x01	; 1
 aae:	89 f0       	breq	.+34     	; 0xad2 <DIO_TogglePinDirection+0x26>
 ab0:	28 f0       	brcs	.+10     	; 0xabc <DIO_TogglePinDirection+0x10>
 ab2:	82 30       	cpi	r24, 0x02	; 2
 ab4:	c9 f0       	breq	.+50     	; 0xae8 <DIO_TogglePinDirection+0x3c>
 ab6:	83 30       	cpi	r24, 0x03	; 3
 ab8:	11 f1       	breq	.+68     	; 0xafe <DIO_TogglePinDirection+0x52>
 aba:	08 95       	ret
	{
		case DIO_PORTA: tgl_bit(_DIO_PORTA, pin); break;
 abc:	2b b3       	in	r18, 0x1b	; 27
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <DIO_TogglePinDirection+0x1c>
 ac4:	88 0f       	add	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	6a 95       	dec	r22
 aca:	e2 f7       	brpl	.-8      	; 0xac4 <DIO_TogglePinDirection+0x18>
 acc:	82 27       	eor	r24, r18
 ace:	8b bb       	out	0x1b, r24	; 27
 ad0:	08 95       	ret
		case DIO_PORTB: tgl_bit(_DIO_PORTB, pin); break;
 ad2:	28 b3       	in	r18, 0x18	; 24
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	02 c0       	rjmp	.+4      	; 0xade <DIO_TogglePinDirection+0x32>
 ada:	88 0f       	add	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	6a 95       	dec	r22
 ae0:	e2 f7       	brpl	.-8      	; 0xada <DIO_TogglePinDirection+0x2e>
 ae2:	82 27       	eor	r24, r18
 ae4:	88 bb       	out	0x18, r24	; 24
 ae6:	08 95       	ret
		case DIO_PORTC: tgl_bit(_DIO_PORTC, pin); break;
 ae8:	25 b3       	in	r18, 0x15	; 21
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_TogglePinDirection+0x48>
 af0:	88 0f       	add	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	6a 95       	dec	r22
 af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_TogglePinDirection+0x44>
 af8:	82 27       	eor	r24, r18
 afa:	85 bb       	out	0x15, r24	; 21
 afc:	08 95       	ret
		case DIO_PORTD: tgl_bit(_DIO_PORTD, pin); break;
 afe:	22 b3       	in	r18, 0x12	; 18
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_TogglePinDirection+0x5e>
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	6a 95       	dec	r22
 b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_TogglePinDirection+0x5a>
 b0e:	82 27       	eor	r24, r18
 b10:	82 bb       	out	0x12, r24	; 18
 b12:	08 95       	ret

00000b14 <External_Interrupt_Initialization>:

#include "Interrupts_Interface.h"

void External_Interrupt_Initialization(interruptPin intrrupt, interruptSense sense)
{
	cli();//Disable global interrupt clear bit 7 in SREG (Apartment door)
 b14:	f8 94       	cli
	switch (intrrupt)
 b16:	81 30       	cpi	r24, 0x01	; 1
 b18:	69 f1       	breq	.+90     	; 0xb74 <External_Interrupt_Initialization+0x60>
 b1a:	20 f0       	brcs	.+8      	; 0xb24 <External_Interrupt_Initialization+0x10>
 b1c:	82 30       	cpi	r24, 0x02	; 2
 b1e:	09 f4       	brne	.+2      	; 0xb22 <External_Interrupt_Initialization+0xe>
 b20:	51 c0       	rjmp	.+162    	; 0xbc4 <External_Interrupt_Initialization+0xb0>
 b22:	6b c0       	rjmp	.+214    	; 0xbfa <External_Interrupt_Initialization+0xe6>
	{
		case EXT_INT0:
		clr_bit(DDRD, INT0);//Define direction for interrupt pin as input
 b24:	8e 98       	cbi	0x11, 6	; 17
		set_bit(GICR, INT0);//Enable peripheral interrupt (Room door)
 b26:	8b b7       	in	r24, 0x3b	; 59
 b28:	80 64       	ori	r24, 0x40	; 64
 b2a:	8b bf       	out	0x3b, r24	; 59
		switch (sense)
 b2c:	61 30       	cpi	r22, 0x01	; 1
 b2e:	69 f0       	breq	.+26     	; 0xb4a <External_Interrupt_Initialization+0x36>
 b30:	28 f0       	brcs	.+10     	; 0xb3c <External_Interrupt_Initialization+0x28>
 b32:	62 30       	cpi	r22, 0x02	; 2
 b34:	89 f0       	breq	.+34     	; 0xb58 <External_Interrupt_Initialization+0x44>
 b36:	63 30       	cpi	r22, 0x03	; 3
 b38:	b1 f0       	breq	.+44     	; 0xb66 <External_Interrupt_Initialization+0x52>
 b3a:	5f c0       	rjmp	.+190    	; 0xbfa <External_Interrupt_Initialization+0xe6>
		{
			case EXT_INTERRUPT_SENSE_LOW:
			clr_bit(_INTERRUPT_MCUCR, ISC01); clr_bit(_INTERRUPT_MCUCR, ISC00);// 0       0
 b3c:	85 b7       	in	r24, 0x35	; 53
 b3e:	8d 7f       	andi	r24, 0xFD	; 253
 b40:	85 bf       	out	0x35, r24	; 53
 b42:	85 b7       	in	r24, 0x35	; 53
 b44:	8e 7f       	andi	r24, 0xFE	; 254
 b46:	85 bf       	out	0x35, r24	; 53
			break;
 b48:	58 c0       	rjmp	.+176    	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_HIGH:
			clr_bit(_INTERRUPT_MCUCR, ISC01); set_bit(_INTERRUPT_MCUCR, ISC00);// 0       1
 b4a:	85 b7       	in	r24, 0x35	; 53
 b4c:	8d 7f       	andi	r24, 0xFD	; 253
 b4e:	85 bf       	out	0x35, r24	; 53
 b50:	85 b7       	in	r24, 0x35	; 53
 b52:	81 60       	ori	r24, 0x01	; 1
 b54:	85 bf       	out	0x35, r24	; 53
			break;
 b56:	51 c0       	rjmp	.+162    	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_FALLING:
			set_bit(_INTERRUPT_MCUCR, ISC01); clr_bit(_INTERRUPT_MCUCR, ISC00);// 1       0
 b58:	85 b7       	in	r24, 0x35	; 53
 b5a:	82 60       	ori	r24, 0x02	; 2
 b5c:	85 bf       	out	0x35, r24	; 53
 b5e:	85 b7       	in	r24, 0x35	; 53
 b60:	8e 7f       	andi	r24, 0xFE	; 254
 b62:	85 bf       	out	0x35, r24	; 53
			break;
 b64:	4a c0       	rjmp	.+148    	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_RISING:
			set_bit(_INTERRUPT_MCUCR, ISC01); set_bit(_INTERRUPT_MCUCR, ISC00);// 1       1
 b66:	85 b7       	in	r24, 0x35	; 53
 b68:	82 60       	ori	r24, 0x02	; 2
 b6a:	85 bf       	out	0x35, r24	; 53
 b6c:	85 b7       	in	r24, 0x35	; 53
 b6e:	81 60       	ori	r24, 0x01	; 1
 b70:	85 bf       	out	0x35, r24	; 53
			break;
 b72:	43 c0       	rjmp	.+134    	; 0xbfa <External_Interrupt_Initialization+0xe6>
		}
		break;
		case EXT_INT1:
		clr_bit(DDRD, INT1);//Define direction for interrupt pin as input
 b74:	8f 98       	cbi	0x11, 7	; 17
		set_bit(GICR, INT1);//Enable peripheral interrupt (Room door)
 b76:	8b b7       	in	r24, 0x3b	; 59
 b78:	80 68       	ori	r24, 0x80	; 128
 b7a:	8b bf       	out	0x3b, r24	; 59
		switch (sense)
 b7c:	61 30       	cpi	r22, 0x01	; 1
 b7e:	69 f0       	breq	.+26     	; 0xb9a <External_Interrupt_Initialization+0x86>
 b80:	28 f0       	brcs	.+10     	; 0xb8c <External_Interrupt_Initialization+0x78>
 b82:	62 30       	cpi	r22, 0x02	; 2
 b84:	89 f0       	breq	.+34     	; 0xba8 <External_Interrupt_Initialization+0x94>
 b86:	63 30       	cpi	r22, 0x03	; 3
 b88:	b1 f0       	breq	.+44     	; 0xbb6 <External_Interrupt_Initialization+0xa2>
 b8a:	37 c0       	rjmp	.+110    	; 0xbfa <External_Interrupt_Initialization+0xe6>
		{
			case EXT_INTERRUPT_SENSE_LOW:
			clr_bit(_INTERRUPT_MCUCR, ISC11); clr_bit(_INTERRUPT_MCUCR, ISC10);// 0       0
 b8c:	85 b7       	in	r24, 0x35	; 53
 b8e:	87 7f       	andi	r24, 0xF7	; 247
 b90:	85 bf       	out	0x35, r24	; 53
 b92:	85 b7       	in	r24, 0x35	; 53
 b94:	8b 7f       	andi	r24, 0xFB	; 251
 b96:	85 bf       	out	0x35, r24	; 53
			break;
 b98:	30 c0       	rjmp	.+96     	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_HIGH:
			clr_bit(_INTERRUPT_MCUCR, ISC11); set_bit(_INTERRUPT_MCUCR, ISC10);// 0       1
 b9a:	85 b7       	in	r24, 0x35	; 53
 b9c:	87 7f       	andi	r24, 0xF7	; 247
 b9e:	85 bf       	out	0x35, r24	; 53
 ba0:	85 b7       	in	r24, 0x35	; 53
 ba2:	84 60       	ori	r24, 0x04	; 4
 ba4:	85 bf       	out	0x35, r24	; 53
			break;
 ba6:	29 c0       	rjmp	.+82     	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_FALLING:
			set_bit(_INTERRUPT_MCUCR, ISC11); clr_bit(_INTERRUPT_MCUCR, ISC10);// 1       0
 ba8:	85 b7       	in	r24, 0x35	; 53
 baa:	88 60       	ori	r24, 0x08	; 8
 bac:	85 bf       	out	0x35, r24	; 53
 bae:	85 b7       	in	r24, 0x35	; 53
 bb0:	8b 7f       	andi	r24, 0xFB	; 251
 bb2:	85 bf       	out	0x35, r24	; 53
			break;
 bb4:	22 c0       	rjmp	.+68     	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_RISING:
			set_bit(_INTERRUPT_MCUCR, ISC11); set_bit(_INTERRUPT_MCUCR, ISC10);// 1       1
 bb6:	85 b7       	in	r24, 0x35	; 53
 bb8:	88 60       	ori	r24, 0x08	; 8
 bba:	85 bf       	out	0x35, r24	; 53
 bbc:	85 b7       	in	r24, 0x35	; 53
 bbe:	84 60       	ori	r24, 0x04	; 4
 bc0:	85 bf       	out	0x35, r24	; 53
			break;
 bc2:	1b c0       	rjmp	.+54     	; 0xbfa <External_Interrupt_Initialization+0xe6>
		}
		break;
		case EXT_INT2:
		clr_bit(DDRB, INT2);//Define direction for interrupt pin as input
 bc4:	bd 98       	cbi	0x17, 5	; 23
		set_bit(GICR, INT2);//Enable peripheral interrupt (Room door)
 bc6:	8b b7       	in	r24, 0x3b	; 59
 bc8:	80 62       	ori	r24, 0x20	; 32
 bca:	8b bf       	out	0x3b, r24	; 59
		switch (sense)
 bcc:	61 30       	cpi	r22, 0x01	; 1
 bce:	91 f0       	breq	.+36     	; 0xbf4 <External_Interrupt_Initialization+0xe0>
 bd0:	28 f0       	brcs	.+10     	; 0xbdc <External_Interrupt_Initialization+0xc8>
 bd2:	62 30       	cpi	r22, 0x02	; 2
 bd4:	39 f0       	breq	.+14     	; 0xbe4 <External_Interrupt_Initialization+0xd0>
 bd6:	63 30       	cpi	r22, 0x03	; 3
 bd8:	49 f0       	breq	.+18     	; 0xbec <External_Interrupt_Initialization+0xd8>
 bda:	0f c0       	rjmp	.+30     	; 0xbfa <External_Interrupt_Initialization+0xe6>
		{
			case EXT_INTERRUPT_SENSE_LOW:
			clr_bit(_INTERRUPT_MCUCSR, ISC2);// 0
 bdc:	84 b7       	in	r24, 0x34	; 52
 bde:	8f 7b       	andi	r24, 0xBF	; 191
 be0:	84 bf       	out	0x34, r24	; 52
			break;
 be2:	0b c0       	rjmp	.+22     	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_FALLING:
			clr_bit(_INTERRUPT_MCUCSR, ISC2);// 0
 be4:	84 b7       	in	r24, 0x34	; 52
 be6:	8f 7b       	andi	r24, 0xBF	; 191
 be8:	84 bf       	out	0x34, r24	; 52
			break;
 bea:	07 c0       	rjmp	.+14     	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_RISING:
			set_bit(_INTERRUPT_MCUCSR, ISC2);// 1
 bec:	84 b7       	in	r24, 0x34	; 52
 bee:	80 64       	ori	r24, 0x40	; 64
 bf0:	84 bf       	out	0x34, r24	; 52
			break;
 bf2:	03 c0       	rjmp	.+6      	; 0xbfa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_HIGH:
			set_bit(_INTERRUPT_MCUCSR, ISC2);// 1
 bf4:	84 b7       	in	r24, 0x34	; 52
 bf6:	80 64       	ori	r24, 0x40	; 64
 bf8:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
	sei();//Enable global interrupt set bit 7 in SREG (Apartment door)
 bfa:	78 94       	sei
 bfc:	08 95       	ret

00000bfe <Timer0_OVF_WithInterrupt_Initialize>:
}
void Timer0_OVF_WithInterrupt_Stop (void)
{
	/*Choose pre-scaler 0*/
	//_T0_OVF_TCCR0 = 0x00;
	_T0_OVF_TCCR0 &=~((1<<CS01)|(1<<CS02)|(1<<CS00));
 bfe:	bb 9a       	sbi	0x17, 3	; 23
 c00:	83 b7       	in	r24, 0x33	; 51
 c02:	13 be       	out	0x33, r1	; 51
 c04:	89 b7       	in	r24, 0x39	; 57
 c06:	81 60       	ori	r24, 0x01	; 1
 c08:	89 bf       	out	0x39, r24	; 57
 c0a:	78 94       	sei
 c0c:	08 95       	ret

00000c0e <Timer0_OVF_WithInterrupt_Start>:
 c0e:	93 b7       	in	r25, 0x33	; 51
 c10:	9d 7f       	andi	r25, 0xFD	; 253
 c12:	93 bf       	out	0x33, r25	; 51
 c14:	93 b7       	in	r25, 0x33	; 51
 c16:	95 60       	ori	r25, 0x05	; 5
 c18:	93 bf       	out	0x33, r25	; 51
 c1a:	88 23       	and	r24, r24
 c1c:	19 f0       	breq	.+6      	; 0xc24 <Timer0_OVF_WithInterrupt_Start+0x16>
 c1e:	85 30       	cpi	r24, 0x05	; 5
 c20:	29 f0       	breq	.+10     	; 0xc2c <Timer0_OVF_WithInterrupt_Start+0x1e>
 c22:	08 95       	ret
 c24:	83 b7       	in	r24, 0x33	; 51
 c26:	88 7f       	andi	r24, 0xF8	; 248
 c28:	83 bf       	out	0x33, r24	; 51
 c2a:	08 95       	ret
 c2c:	83 b7       	in	r24, 0x33	; 51
 c2e:	8d 7f       	andi	r24, 0xFD	; 253
 c30:	83 bf       	out	0x33, r24	; 51
 c32:	83 b7       	in	r24, 0x33	; 51
 c34:	85 60       	ori	r24, 0x05	; 5
 c36:	83 bf       	out	0x33, r24	; 51
 c38:	08 95       	ret

00000c3a <Timer0_OVF_WithInterrupt_SetDelay>:
}
void Timer0_OVF_WithInterrupt_SetDelay (uint32_t delay)
{
 c3a:	0f 93       	push	r16
 c3c:	1f 93       	push	r17
 c3e:	9b 01       	movw	r18, r22
 c40:	ac 01       	movw	r20, r24
	4- Create OVF = Count / 2^8 + 1
	5- Create Initial value = 2^8 - (Count % 2^8)
	6- Set initial value
	*/
	uint8_t Tick = ((1*_T0_OVF_PRESCALER)/_T0_OVF_FREQUENCY);
	uint32_t Count = ((delay * _T0_OVF_MICROSECOND) / Tick);
 c42:	a8 ee       	ldi	r26, 0xE8	; 232
 c44:	b3 e0       	ldi	r27, 0x03	; 3
 c46:	0e 94 92 06 	call	0xd24	; 0xd24 <__muluhisi3>
 c4a:	dc 01       	movw	r26, r24
 c4c:	cb 01       	movw	r24, r22
 c4e:	68 94       	set
 c50:	15 f8       	bld	r1, 5
 c52:	b6 95       	lsr	r27
 c54:	a7 95       	ror	r26
 c56:	97 95       	ror	r25
 c58:	87 95       	ror	r24
 c5a:	16 94       	lsr	r1
 c5c:	d1 f7       	brne	.-12     	; 0xc52 <Timer0_OVF_WithInterrupt_SetDelay+0x18>
	_T0_OVF_Count = (Count / _T0_OVF_BITS) + 1;
 c5e:	09 2f       	mov	r16, r25
 c60:	1a 2f       	mov	r17, r26
 c62:	2b 2f       	mov	r18, r27
 c64:	33 27       	eor	r19, r19
 c66:	0f 5f       	subi	r16, 0xFF	; 255
 c68:	1f 4f       	sbci	r17, 0xFF	; 255
 c6a:	2f 4f       	sbci	r18, 0xFF	; 255
 c6c:	3f 4f       	sbci	r19, 0xFF	; 255
 c6e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <_T0_OVF_Count>
 c72:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <_T0_OVF_Count+0x1>
 c76:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <_T0_OVF_Count+0x2>
 c7a:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <_T0_OVF_Count+0x3>
	_T0_OVF_iValue = _T0_OVF_BITS - (Count % _T0_OVF_BITS);
 c7e:	68 2f       	mov	r22, r24
 c80:	61 95       	neg	r22
 c82:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <_T0_OVF_iValue>
	_T0_OVF_TCNT0 = _T0_OVF_iValue;
 c86:	62 bf       	out	0x32, r22	; 50
}
 c88:	1f 91       	pop	r17
 c8a:	0f 91       	pop	r16
 c8c:	08 95       	ret

00000c8e <__divmodhi4>:
 c8e:	97 fb       	bst	r25, 7
 c90:	07 2e       	mov	r0, r23
 c92:	16 f4       	brtc	.+4      	; 0xc98 <__divmodhi4+0xa>
 c94:	00 94       	com	r0
 c96:	07 d0       	rcall	.+14     	; 0xca6 <__divmodhi4_neg1>
 c98:	77 fd       	sbrc	r23, 7
 c9a:	09 d0       	rcall	.+18     	; 0xcae <__divmodhi4_neg2>
 c9c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__udivmodhi4>
 ca0:	07 fc       	sbrc	r0, 7
 ca2:	05 d0       	rcall	.+10     	; 0xcae <__divmodhi4_neg2>
 ca4:	3e f4       	brtc	.+14     	; 0xcb4 <__divmodhi4_exit>

00000ca6 <__divmodhi4_neg1>:
 ca6:	90 95       	com	r25
 ca8:	81 95       	neg	r24
 caa:	9f 4f       	sbci	r25, 0xFF	; 255
 cac:	08 95       	ret

00000cae <__divmodhi4_neg2>:
 cae:	70 95       	com	r23
 cb0:	61 95       	neg	r22
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255

00000cb4 <__divmodhi4_exit>:
 cb4:	08 95       	ret

00000cb6 <__udivmodsi4>:
 cb6:	a1 e2       	ldi	r26, 0x21	; 33
 cb8:	1a 2e       	mov	r1, r26
 cba:	aa 1b       	sub	r26, r26
 cbc:	bb 1b       	sub	r27, r27
 cbe:	fd 01       	movw	r30, r26
 cc0:	0d c0       	rjmp	.+26     	; 0xcdc <__udivmodsi4_ep>

00000cc2 <__udivmodsi4_loop>:
 cc2:	aa 1f       	adc	r26, r26
 cc4:	bb 1f       	adc	r27, r27
 cc6:	ee 1f       	adc	r30, r30
 cc8:	ff 1f       	adc	r31, r31
 cca:	a2 17       	cp	r26, r18
 ccc:	b3 07       	cpc	r27, r19
 cce:	e4 07       	cpc	r30, r20
 cd0:	f5 07       	cpc	r31, r21
 cd2:	20 f0       	brcs	.+8      	; 0xcdc <__udivmodsi4_ep>
 cd4:	a2 1b       	sub	r26, r18
 cd6:	b3 0b       	sbc	r27, r19
 cd8:	e4 0b       	sbc	r30, r20
 cda:	f5 0b       	sbc	r31, r21

00000cdc <__udivmodsi4_ep>:
 cdc:	66 1f       	adc	r22, r22
 cde:	77 1f       	adc	r23, r23
 ce0:	88 1f       	adc	r24, r24
 ce2:	99 1f       	adc	r25, r25
 ce4:	1a 94       	dec	r1
 ce6:	69 f7       	brne	.-38     	; 0xcc2 <__udivmodsi4_loop>
 ce8:	60 95       	com	r22
 cea:	70 95       	com	r23
 cec:	80 95       	com	r24
 cee:	90 95       	com	r25
 cf0:	9b 01       	movw	r18, r22
 cf2:	ac 01       	movw	r20, r24
 cf4:	bd 01       	movw	r22, r26
 cf6:	cf 01       	movw	r24, r30
 cf8:	08 95       	ret

00000cfa <__tablejump2__>:
 cfa:	ee 0f       	add	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	05 90       	lpm	r0, Z+
 d00:	f4 91       	lpm	r31, Z
 d02:	e0 2d       	mov	r30, r0
 d04:	09 94       	ijmp

00000d06 <__umulhisi3>:
 d06:	a2 9f       	mul	r26, r18
 d08:	b0 01       	movw	r22, r0
 d0a:	b3 9f       	mul	r27, r19
 d0c:	c0 01       	movw	r24, r0
 d0e:	a3 9f       	mul	r26, r19
 d10:	70 0d       	add	r23, r0
 d12:	81 1d       	adc	r24, r1
 d14:	11 24       	eor	r1, r1
 d16:	91 1d       	adc	r25, r1
 d18:	b2 9f       	mul	r27, r18
 d1a:	70 0d       	add	r23, r0
 d1c:	81 1d       	adc	r24, r1
 d1e:	11 24       	eor	r1, r1
 d20:	91 1d       	adc	r25, r1
 d22:	08 95       	ret

00000d24 <__muluhisi3>:
 d24:	0e 94 83 06 	call	0xd06	; 0xd06 <__umulhisi3>
 d28:	a5 9f       	mul	r26, r21
 d2a:	90 0d       	add	r25, r0
 d2c:	b4 9f       	mul	r27, r20
 d2e:	90 0d       	add	r25, r0
 d30:	a4 9f       	mul	r26, r20
 d32:	80 0d       	add	r24, r0
 d34:	91 1d       	adc	r25, r1
 d36:	11 24       	eor	r1, r1
 d38:	08 95       	ret

00000d3a <__udivmodhi4>:
 d3a:	aa 1b       	sub	r26, r26
 d3c:	bb 1b       	sub	r27, r27
 d3e:	51 e1       	ldi	r21, 0x11	; 17
 d40:	07 c0       	rjmp	.+14     	; 0xd50 <__udivmodhi4_ep>

00000d42 <__udivmodhi4_loop>:
 d42:	aa 1f       	adc	r26, r26
 d44:	bb 1f       	adc	r27, r27
 d46:	a6 17       	cp	r26, r22
 d48:	b7 07       	cpc	r27, r23
 d4a:	10 f0       	brcs	.+4      	; 0xd50 <__udivmodhi4_ep>
 d4c:	a6 1b       	sub	r26, r22
 d4e:	b7 0b       	sbc	r27, r23

00000d50 <__udivmodhi4_ep>:
 d50:	88 1f       	adc	r24, r24
 d52:	99 1f       	adc	r25, r25
 d54:	5a 95       	dec	r21
 d56:	a9 f7       	brne	.-22     	; 0xd42 <__udivmodhi4_loop>
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	bc 01       	movw	r22, r24
 d5e:	cd 01       	movw	r24, r26
 d60:	08 95       	ret

00000d62 <_exit>:
 d62:	f8 94       	cli

00000d64 <__stop_program>:
 d64:	ff cf       	rjmp	.-2      	; 0xd64 <__stop_program>

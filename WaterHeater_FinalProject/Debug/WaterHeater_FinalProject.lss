
WaterHeater_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001098  0000112c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800062  00800062  0000112e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dac  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c7  00000000  00000000  00005398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d9  00000000  00000000  0000685f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  00008a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001547  00000000  00000000  00009340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001771  00000000  00000000  0000a887  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000bff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_1>
       8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_2>
       c:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	47 05       	cpc	r20, r7
      56:	4a 05       	cpc	r20, r10
      58:	4d 05       	cpc	r20, r13
      5a:	50 05       	cpc	r21, r0
      5c:	53 05       	cpc	r21, r3
      5e:	56 05       	cpc	r21, r6
      60:	59 05       	cpc	r21, r9
      62:	5c 05       	cpc	r21, r12

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e9       	ldi	r30, 0x98	; 152
      78:	f0 e1       	ldi	r31, 0x10	; 16
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a2 36       	cpi	r26, 0x62	; 98
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	a2 e6       	ldi	r26, 0x62	; 98
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ae 37       	cpi	r26, 0x7E	; 126
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
      9a:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

#include "WaterHeater_Interface.h"

int main(void) {
	
	WaterHeater();
      a2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <WaterHeater>
	
}
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	08 95       	ret

000000ac <Handle_TemperatureSetting>:


// Handle Temperature Setting Mode
void Handle_TemperatureSetting(void) {

	if (g_TemperatureSettingMode)
      ac:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
      b0:	88 23       	and	r24, r24
      b2:	c1 f0       	breq	.+48     	; 0xe4 <Handle_TemperatureSetting+0x38>
	{
		// Exit setting mode after inactivity
		if ((g_Ticks - g_lastInteractionTime) > (INACTIVITY_TIMEOUT / 100))
      b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
      b8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
      bc:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
      c0:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
      c4:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <g_lastInteractionTime>
      c8:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <g_lastInteractionTime+0x1>
      cc:	82 1b       	sub	r24, r18
      ce:	93 0b       	sbc	r25, r19
      d0:	a1 09       	sbc	r26, r1
      d2:	b1 09       	sbc	r27, r1
      d4:	c3 97       	sbiw	r24, 0x33	; 51
      d6:	a1 05       	cpc	r26, r1
      d8:	b1 05       	cpc	r27, r1
      da:	20 f0       	brcs	.+8      	; 0xe4 <Handle_TemperatureSetting+0x38>
		{
			g_TemperatureSettingMode = 0;
      dc:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <g_TemperatureSettingMode>
			g_BlinkFlag = 0 ;
      e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <g_BlinkFlag>
      e4:	08 95       	ret

000000e6 <Retrieve_Temperature_From_EEPROM>:

// Retrieve Temperature from EEPROM
void Retrieve_Temperature_From_EEPROM(void) {
	
	uint8_t savedTemperature;
	savedTemperature = EEPROM_Read_DataByte(0x01);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 90 04 	call	0x920	; 0x920 <EEPROM_Read_DataByte>

	if (savedTemperature >= MIN_TEMPERATURE && savedTemperature <= MAX_TEMPERATURE) {
      ee:	9d ed       	ldi	r25, 0xDD	; 221
      f0:	98 0f       	add	r25, r24
      f2:	99 32       	cpi	r25, 0x29	; 41
      f4:	18 f4       	brcc	.+6      	; 0xfc <Retrieve_Temperature_From_EEPROM+0x16>
		g_SetTemperature = savedTemperature;
      f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      fa:	08 95       	ret
		} else {
		g_SetTemperature = INITIAL_TEMPERATURE;
      fc:	8c e3       	ldi	r24, 0x3C	; 60
      fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     102:	08 95       	ret

00000104 <System_Initialize>:


// System Initialization
void System_Initialize(void) {
	
	ON_LED_Initialize();
     104:	0e 94 be 04 	call	0x97c	; 0x97c <ON_LED_Initialize>
	HEATING_LED_Initialize();
     108:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <HEATING_LED_Initialize>
	COOLING_LED_Initialize();
     10c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <COOLING_LED_Initialize>
	
	LM35_Initialize();
     110:	0e 94 17 05 	call	0xa2e	; 0xa2e <LM35_Initialize>
	SEVSENSEGMENT_Initialize();
     114:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SEVSENSEGMENT_Initialize>
	
	HeaterRelay_Initialize();
     118:	0e 94 05 05 	call	0xa0a	; 0xa0a <HeaterRelay_Initialize>
	CoolerRelay_Initialize();
     11c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <CoolerRelay_Initialize>
	
	LCD_Initialize();
     120:	0e 94 13 03 	call	0x626	; 0x626 <LCD_Initialize>
	
	Timer0_OVF_WithInterrupt_Initialize();
     124:	0e 94 57 07 	call	0xeae	; 0xeae <Timer0_OVF_WithInterrupt_Initialize>
	Timer0_OVF_WithInterrupt_Start(_T0_OVF_PRE_1024);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	0e 94 5f 07 	call	0xebe	; 0xebe <Timer0_OVF_WithInterrupt_Start>
	Timer0_OVF_WithInterrupt_SetDelay(10);
     12e:	6a e0       	ldi	r22, 0x0A	; 10
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 75 07 	call	0xeea	; 0xeea <Timer0_OVF_WithInterrupt_SetDelay>
	
	External_Interrupt_Initialization(EXT_INT0,EXT_INTERRUPT_SENSE_RISING);
     13a:	63 e0       	ldi	r22, 0x03	; 3
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <External_Interrupt_Initialization>
	External_Interrupt_Initialization(EXT_INT1,EXT_INTERRUPT_SENSE_RISING);
     142:	63 e0       	ldi	r22, 0x03	; 3
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <External_Interrupt_Initialization>
	External_Interrupt_Initialization(EXT_INT2,EXT_INTERRUPT_SENSE_FALLING);
     14a:	62 e0       	ldi	r22, 0x02	; 2
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <External_Interrupt_Initialization>
	
	EEPROM_Initialize();
     152:	0e 94 6d 04 	call	0x8da	; 0x8da <EEPROM_Initialize>
	
	// Retrieve last saved temperature
	Retrieve_Temperature_From_EEPROM();
     156:	0e 94 73 00 	call	0xe6	; 0xe6 <Retrieve_Temperature_From_EEPROM>
	
	sei();
     15a:	78 94       	sei
     15c:	08 95       	ret

0000015e <Save_Temperature_To_EEPROM>:
	}
}

// Save Temperature to EEPROM
void Save_Temperature_To_EEPROM(void) {
	EEPROM_Write_DataByte(0x01, g_SetTemperature);
     15e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 71 04 	call	0x8e2	; 0x8e2 <EEPROM_Write_DataByte>
     16a:	08 95       	ret

0000016c <__vector_1>:
		LCD_Write_IntegerNumber(g_SetTemperature);
		
	}
}

ISR(INT0_vect) {
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	2f 93       	push	r18
     178:	3f 93       	push	r19
     17a:	4f 93       	push	r20
     17c:	5f 93       	push	r21
     17e:	6f 93       	push	r22
     180:	7f 93       	push	r23
     182:	8f 93       	push	r24
     184:	9f 93       	push	r25
     186:	af 93       	push	r26
     188:	bf 93       	push	r27
     18a:	ef 93       	push	r30
     18c:	ff 93       	push	r31
	// UP button pressed
	if (g_HeaterState)
     18e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
     192:	88 23       	and	r24, r24
     194:	f1 f1       	breq	.+124    	; 0x212 <__vector_1+0xa6>
	{
		if (!g_TemperatureSettingMode) {
     196:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
     19a:	81 11       	cpse	r24, r1
     19c:	12 c0       	rjmp	.+36     	; 0x1c2 <__vector_1+0x56>
			g_TemperatureSettingMode = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_TemperatureSettingMode>
			g_lastInteractionTime = g_Ticks;
     1a4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
     1a8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
     1ac:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
     1b0:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
     1b4:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
     1b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
			Handle_TemperatureSetting();
     1bc:	0e 94 56 00 	call	0xac	; 0xac <Handle_TemperatureSetting>
     1c0:	28 c0       	rjmp	.+80     	; 0x212 <__vector_1+0xa6>
		}else
		{
			g_SetTemperature = (g_SetTemperature + 5 <= MAX_TEMPERATURE) ? g_SetTemperature + 5 : MAX_TEMPERATURE;
     1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	05 96       	adiw	r24, 0x05	; 5
     1ca:	8c 34       	cpi	r24, 0x4C	; 76
     1cc:	91 05       	cpc	r25, r1
     1ce:	14 f0       	brlt	.+4      	; 0x1d4 <__vector_1+0x68>
     1d0:	8b e4       	ldi	r24, 0x4B	; 75
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			LCD_Write_Location(ROW1,COL0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_Write_Location>
			LCD_Write_IntegerNumber(g_SetTemperature);
     1e0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_Write_IntegerNumber>
			SEVSENSEGMENT_DisplayNumber(g_SetTemperature);
     1ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     1f2:	0e 94 34 04 	call	0x868	; 0x868 <SEVSENSEGMENT_DisplayNumber>
			g_lastInteractionTime = g_Ticks;
     1f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
     1fa:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
     1fe:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
     202:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
     206:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
     20a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
			Save_Temperature_To_EEPROM();
     20e:	0e 94 af 00 	call	0x15e	; 0x15e <Save_Temperature_To_EEPROM>
		}
	}
	
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	7f 91       	pop	r23
     220:	6f 91       	pop	r22
     222:	5f 91       	pop	r21
     224:	4f 91       	pop	r20
     226:	3f 91       	pop	r19
     228:	2f 91       	pop	r18
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <__vector_2>:

ISR(INT1_vect) {
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	2f 93       	push	r18
     240:	3f 93       	push	r19
     242:	4f 93       	push	r20
     244:	5f 93       	push	r21
     246:	6f 93       	push	r22
     248:	7f 93       	push	r23
     24a:	8f 93       	push	r24
     24c:	9f 93       	push	r25
     24e:	af 93       	push	r26
     250:	bf 93       	push	r27
     252:	ef 93       	push	r30
     254:	ff 93       	push	r31
	// DOWN button pressed
	if (g_HeaterState)
     256:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
     25a:	88 23       	and	r24, r24
     25c:	f1 f1       	breq	.+124    	; 0x2da <__vector_2+0xa6>
	{
		if (!g_TemperatureSettingMode) {
     25e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
     262:	81 11       	cpse	r24, r1
     264:	12 c0       	rjmp	.+36     	; 0x28a <__vector_2+0x56>
			g_TemperatureSettingMode = 1;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_TemperatureSettingMode>
			g_lastInteractionTime = g_Ticks;
     26c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
     270:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
     274:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
     278:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
     27c:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
     280:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
			Handle_TemperatureSetting();
     284:	0e 94 56 00 	call	0xac	; 0xac <Handle_TemperatureSetting>
     288:	28 c0       	rjmp	.+80     	; 0x2da <__vector_2+0xa6>
		}else
		{
			g_SetTemperature = (g_SetTemperature - 5 >= MIN_TEMPERATURE) ? g_SetTemperature - 5 : MIN_TEMPERATURE;
     28a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	05 97       	sbiw	r24, 0x05	; 5
     292:	83 32       	cpi	r24, 0x23	; 35
     294:	91 05       	cpc	r25, r1
     296:	14 f4       	brge	.+4      	; 0x29c <__vector_2+0x68>
     298:	83 e2       	ldi	r24, 0x23	; 35
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			LCD_Write_Location(ROW1,COL0);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_Write_Location>
			LCD_Write_IntegerNumber(g_SetTemperature);
     2a8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_Write_IntegerNumber>
			SEVSENSEGMENT_DisplayNumber(g_SetTemperature);
     2b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2ba:	0e 94 34 04 	call	0x868	; 0x868 <SEVSENSEGMENT_DisplayNumber>
			g_lastInteractionTime = g_Ticks;
     2be:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
     2c2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
     2c6:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
     2ca:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
     2ce:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_lastInteractionTime+0x1>
     2d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_lastInteractionTime>
			Save_Temperature_To_EEPROM();
     2d6:	0e 94 af 00 	call	0x15e	; 0x15e <Save_Temperature_To_EEPROM>
		}
		
	}
	
}
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <System_Off>:
	}
}

void System_Off(void)
{
	ON_LED_OFF();
     2fc:	0e 94 ca 04 	call	0x994	; 0x994 <ON_LED_OFF>
	COOLING_LED_OFF();
     300:	0e 94 ed 04 	call	0x9da	; 0x9da <COOLING_LED_OFF>
	HEATING_LED_OFF();
     304:	0e 94 d6 04 	call	0x9ac	; 0x9ac <HEATING_LED_OFF>
	
	CoolerRelay_Off();
     308:	0e 94 ff 04 	call	0x9fe	; 0x9fe <CoolerRelay_Off>
	HeaterRelay_Off();
     30c:	0e 94 11 05 	call	0xa22	; 0xa22 <HeaterRelay_Off>
	
	SEVSENSEGMENT_OFF();
     310:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SEVSENSEGMENT_OFF>
     314:	08 95       	ret

00000316 <__vector_3>:
	}
}


// Handle ON/OFF Button
ISR(INT2_vect) {
     316:	1f 92       	push	r1
     318:	0f 92       	push	r0
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	0f 92       	push	r0
     31e:	11 24       	eor	r1, r1
     320:	2f 93       	push	r18
     322:	3f 93       	push	r19
     324:	4f 93       	push	r20
     326:	5f 93       	push	r21
     328:	6f 93       	push	r22
     32a:	7f 93       	push	r23
     32c:	8f 93       	push	r24
     32e:	9f 93       	push	r25
     330:	af 93       	push	r26
     332:	bf 93       	push	r27
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
	
	g_HeaterState = !g_HeaterState;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <g_HeaterState>
     33e:	91 11       	cpse	r25, r1
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <g_HeaterState>
	LCD_Write_Location(ROW0,COL0);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_Write_Location>
	LCD_Write_IntegerNumber(g_HeaterState);
     34e:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <g_HeaterState>
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_Write_IntegerNumber>

	if (g_HeaterState == 0) {
     35c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
     360:	81 11       	cpse	r24, r1
     362:	03 c0       	rjmp	.+6      	; 0x36a <__vector_3+0x54>
		System_Off();
     364:	0e 94 7e 01 	call	0x2fc	; 0x2fc <System_Off>
     368:	0d c0       	rjmp	.+26     	; 0x384 <__vector_3+0x6e>
		} else {
		ON_LED_ON();
     36a:	0e 94 c4 04 	call	0x988	; 0x988 <ON_LED_ON>
		LCD_Write_Location(ROW1,COL0);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_Write_Location>
		LCD_Write_IntegerNumber(g_SetTemperature);
     376:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_Write_IntegerNumber>
		
	}
}
     384:	ff 91       	pop	r31
     386:	ef 91       	pop	r30
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <WaterHeater>:
	}
	
}

void WaterHeater(void) {
	System_Initialize();
     3a6:	0e 94 82 00 	call	0x104	; 0x104 <System_Initialize>
	while (1) { // Run infinitely and check the state 
		if (g_HeaterState)
     3aa:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
     3ae:	88 23       	and	r24, r24
     3b0:	c9 f0       	breq	.+50     	; 0x3e4 <WaterHeater+0x3e>
		{
			
			ON_LED_ON();
     3b2:	0e 94 c4 04 	call	0x988	; 0x988 <ON_LED_ON>
			if (g_BlinkFlag) {
     3b6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <g_BlinkFlag>
     3ba:	88 23       	and	r24, r24
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <WaterHeater+0x1e>
				
				SEVSENSEGMENT_OFF();
     3be:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SEVSENSEGMENT_OFF>
     3c2:	0d c0       	rjmp	.+26     	; 0x3de <WaterHeater+0x38>
				
				} else if (g_TemperatureSettingMode) {
     3c4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
     3c8:	88 23       	and	r24, r24
     3ca:	29 f0       	breq	.+10     	; 0x3d6 <WaterHeater+0x30>
				
				SEVSENSEGMENT_DisplayNumber(g_SetTemperature);
     3cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     3d0:	0e 94 34 04 	call	0x868	; 0x868 <SEVSENSEGMENT_DisplayNumber>
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <WaterHeater+0x38>
				
			} else SEVSENSEGMENT_DisplayNumber(g_CurrentTemperature);
     3d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_CurrentTemperature>
     3da:	0e 94 34 04 	call	0x868	; 0x868 <SEVSENSEGMENT_DisplayNumber>
			
			Handle_TemperatureSetting();
     3de:	0e 94 56 00 	call	0xac	; 0xac <Handle_TemperatureSetting>
     3e2:	e3 cf       	rjmp	.-58     	; 0x3aa <WaterHeater+0x4>
			
		} else System_Off(); // Ensure system turns off properly when g_HeaterState = 0
     3e4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <System_Off>
     3e8:	e0 cf       	rjmp	.-64     	; 0x3aa <WaterHeater+0x4>

000003ea <heating>:
	SEVSENSEGMENT_OFF();
}

void heating(void){
	static uint8_t count = 0;
	HeaterRelay_On();
     3ea:	0e 94 0b 05 	call	0xa16	; 0xa16 <HeaterRelay_On>
	COOLING_LED_OFF();
     3ee:	0e 94 ed 04 	call	0x9da	; 0x9da <COOLING_LED_OFF>
	CoolerRelay_Off();
     3f2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <CoolerRelay_Off>
	if (count >= 10)
     3f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     3fa:	8a 30       	cpi	r24, 0x0A	; 10
     3fc:	20 f0       	brcs	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		HEATING_LED_TGL();
     3fe:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <HEATING_LED_TGL>
		count = 0 ;
     402:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
	count++;
     406:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     410:	08 95       	ret

00000412 <cooling>:
}

void cooling(void){
	COOLING_LED_ON();
     412:	0e 94 e7 04 	call	0x9ce	; 0x9ce <COOLING_LED_ON>
	CoolerRelay_On();
     416:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <CoolerRelay_On>
	HEATING_LED_OFF();
     41a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <HEATING_LED_OFF>
	HeaterRelay_Off();
     41e:	0e 94 11 05 	call	0xa22	; 0xa22 <HeaterRelay_Off>
     422:	08 95       	ret

00000424 <ManageHeating>:
void ManageHeating(void) {

	// Temperature sensing every TEMP_SENSING_INTERVAL ms (100ms)
	
	// Read current temperature
	g_CurrentTemperature = LM35_ReadTemperature();
     424:	0e 94 1c 05 	call	0xa38	; 0xa38 <LM35_ReadTemperature>
     428:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <g_CurrentTemperature>
	LCD_Write_Location(ROW0,COL6);
     42c:	66 e0       	ldi	r22, 0x06	; 6
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_Write_Location>
	LCD_Write_IntegerNumber(g_CurrentTemperature);
     434:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <g_CurrentTemperature>
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_Write_IntegerNumber>

	// Update temperature history
	g_TempHistory[g_TempIndex] = g_CurrentTemperature;
     442:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <g_TempIndex>
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	fc 01       	movw	r30, r24
     44a:	ec 59       	subi	r30, 0x9C	; 156
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <g_CurrentTemperature>
     452:	20 83       	st	Z, r18
	g_TempIndex = (g_TempIndex + 1) % TEMP_HISTORY_SIZE;
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	6a e0       	ldi	r22, 0x0A	; 10
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__divmodhi4>
     45e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_TempIndex>
     462:	e4 e6       	ldi	r30, 0x64	; 100
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	4e e6       	ldi	r20, 0x6E	; 110
     468:	50 e0       	ldi	r21, 0x00	; 0

	// Calculate average temperature
	uint16_t tempSum = 0;
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < TEMP_HISTORY_SIZE; i++) {
		tempSum += g_TempHistory[i];
     46e:	81 91       	ld	r24, Z+
     470:	28 0f       	add	r18, r24
     472:	31 1d       	adc	r19, r1
	g_TempHistory[g_TempIndex] = g_CurrentTemperature;
	g_TempIndex = (g_TempIndex + 1) % TEMP_HISTORY_SIZE;

	// Calculate average temperature
	uint16_t tempSum = 0;
	for (uint8_t i = 0; i < TEMP_HISTORY_SIZE; i++) {
     474:	e4 17       	cp	r30, r20
     476:	f5 07       	cpc	r31, r21
     478:	d1 f7       	brne	.-12     	; 0x46e <ManageHeating+0x4a>
		tempSum += g_TempHistory[i];
	}
	uint8_t g_AvergeTemperature = tempSum / TEMP_HISTORY_SIZE;
     47a:	ad ec       	ldi	r26, 0xCD	; 205
     47c:	bc ec       	ldi	r27, 0xCC	; 204
     47e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__umulhisi3>
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
     48a:	96 95       	lsr	r25
     48c:	87 95       	ror	r24
     48e:	99 27       	eor	r25, r25

	// Control logic
	if (g_AvergeTemperature > (g_SetTemperature - 5) && !g_heating) {
     490:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	a9 01       	movw	r20, r18
     498:	45 50       	subi	r20, 0x05	; 5
     49a:	51 09       	sbc	r21, r1
     49c:	48 17       	cp	r20, r24
     49e:	59 07       	cpc	r21, r25
     4a0:	4c f4       	brge	.+18     	; 0x4b4 <ManageHeating+0x90>
     4a2:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <g_heating>
     4a6:	41 11       	cpse	r20, r1
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <ManageHeating+0x90>
		cooling();
     4aa:	0e 94 09 02 	call	0x412	; 0x412 <cooling>
		g_heating = 0;
     4ae:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <g_heating>
     4b2:	08 95       	ret
		} else if (g_AvergeTemperature < (g_SetTemperature + 5)) {
     4b4:	2b 5f       	subi	r18, 0xFB	; 251
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	82 17       	cp	r24, r18
     4ba:	93 07       	cpc	r25, r19
     4bc:	34 f4       	brge	.+12     	; 0x4ca <ManageHeating+0xa6>
		heating();
     4be:	0e 94 f5 01 	call	0x3ea	; 0x3ea <heating>
		g_heating = 1;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <g_heating>
     4c8:	08 95       	ret
		} else {
		HeaterRelay_Off();
     4ca:	0e 94 11 05 	call	0xa22	; 0xa22 <HeaterRelay_Off>
		HEATING_LED_OFF();
     4ce:	0e 94 d6 04 	call	0x9ac	; 0x9ac <HEATING_LED_OFF>
		CoolerRelay_Off();
     4d2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <CoolerRelay_Off>
		COOLING_LED_OFF();
     4d6:	0e 94 ed 04 	call	0x9da	; 0x9da <COOLING_LED_OFF>
		g_heating = 0;
     4da:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <g_heating>
     4de:	08 95       	ret

000004e0 <__vector_11>:
// ISR for Timer0 
extern uint32_t _T0_OVF_Count  ;
extern uint8_t  _T0_OVF_iValue ;

ISR(TIMER0_OVF_vect)
{
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	2f 93       	push	r18
     4ec:	3f 93       	push	r19
     4ee:	4f 93       	push	r20
     4f0:	5f 93       	push	r21
     4f2:	6f 93       	push	r22
     4f4:	7f 93       	push	r23
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
	g_Ticks++;
     502:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <g_Ticks>
     506:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <g_Ticks+0x1>
     50a:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <g_Ticks+0x2>
     50e:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <g_Ticks+0x3>
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	a1 1d       	adc	r26, r1
     516:	b1 1d       	adc	r27, r1
     518:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <g_Ticks>
     51c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <g_Ticks+0x1>
     520:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <g_Ticks+0x2>
     524:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <g_Ticks+0x3>
	_T0_OVF_TCNT0 = _T0_OVF_iValue;
     528:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <_T0_OVF_iValue>
     52c:	82 bf       	out	0x32, r24	; 50
	if (g_HeaterState)
     52e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <g_HeaterState>
     532:	88 23       	and	r24, r24
     534:	f9 f0       	breq	.+62     	; 0x574 <__vector_11+0x94>
	{
		ManageHeating();
     536:	0e 94 12 02 	call	0x424	; 0x424 <ManageHeating>
		
		if (g_Ticks % (DISPLAY_BLINK_INTERVAL / 100) == 0 && g_TemperatureSettingMode)
     53a:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <g_Ticks>
     53e:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <g_Ticks+0x1>
     542:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <g_Ticks+0x2>
     546:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <g_Ticks+0x3>
     54a:	2a e0       	ldi	r18, 0x0A	; 10
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	0e 94 b3 07 	call	0xf66	; 0xf66 <__udivmodsi4>
     556:	67 2b       	or	r22, r23
     558:	68 2b       	or	r22, r24
     55a:	69 2b       	or	r22, r25
     55c:	59 f4       	brne	.+22     	; 0x574 <__vector_11+0x94>
     55e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_TemperatureSettingMode>
     562:	88 23       	and	r24, r24
     564:	39 f0       	breq	.+14     	; 0x574 <__vector_11+0x94>
		{
			g_BlinkFlag = !g_BlinkFlag;
     566:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <g_BlinkFlag>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	91 11       	cpse	r25, r1
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <g_BlinkFlag>
		}
		
	}
}
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0f be       	out	0x3f, r0	; 63
     590:	0f 90       	pop	r0
     592:	1f 90       	pop	r1
     594:	18 95       	reti

00000596 <LCD_Write_Command>:
void LCD_Write_FloatNumber(fint32_t FltNumber)
{
	char Fnum[10];
	ftoa(FltNumber, Fnum, 3);// Float to ASCII
	LCD_Write_String((uint8_t*)Fnum);
}
     596:	cf 93       	push	r28
     598:	c8 2f       	mov	r28, r24
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	63 e0       	ldi	r22, 0x03	; 3
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     5b8:	88 b3       	in	r24, 0x18	; 24
     5ba:	9c 2f       	mov	r25, r28
     5bc:	90 7f       	andi	r25, 0xF0	; 240
     5be:	8f 70       	andi	r24, 0x0F	; 15
     5c0:	89 2b       	or	r24, r25
     5c2:	88 bb       	out	0x18, r24	; 24
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	63 e0       	ldi	r22, 0x03	; 3
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     5ce:	8f e9       	ldi	r24, 0x9F	; 159
     5d0:	9f e0       	ldi	r25, 0x0F	; 15
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_Write_Command+0x3c>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_Write_Command+0x42>
     5d8:	00 00       	nop
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	63 e0       	ldi	r22, 0x03	; 3
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     5e4:	28 b3       	in	r18, 0x18	; 24
     5e6:	30 e1       	ldi	r19, 0x10	; 16
     5e8:	c3 9f       	mul	r28, r19
     5ea:	c0 01       	movw	r24, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	92 2f       	mov	r25, r18
     5f0:	9f 70       	andi	r25, 0x0F	; 15
     5f2:	89 2b       	or	r24, r25
     5f4:	88 bb       	out	0x18, r24	; 24
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	63 e0       	ldi	r22, 0x03	; 3
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     600:	8f e9       	ldi	r24, 0x9F	; 159
     602:	9f e0       	ldi	r25, 0x0F	; 15
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <LCD_Write_Command+0x6e>
     608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_Write_Command+0x74>
     60a:	00 00       	nop
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	63 e0       	ldi	r22, 0x03	; 3
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     616:	8f e3       	ldi	r24, 0x3F	; 63
     618:	9f e1       	ldi	r25, 0x1F	; 31
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <LCD_Write_Command+0x84>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <LCD_Write_Command+0x8a>
     620:	00 00       	nop
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <LCD_Initialize>:
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	64 e0       	ldi	r22, 0x04	; 4
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	65 e0       	ldi	r22, 0x05	; 5
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	66 e0       	ldi	r22, 0x06	; 6
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	67 e0       	ldi	r22, 0x07	; 7
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	63 e0       	ldi	r22, 0x03	; 3
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     66c:	83 e3       	ldi	r24, 0x33	; 51
     66e:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     672:	82 e3       	ldi	r24, 0x32	; 50
     674:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     678:	88 e2       	ldi	r24, 0x28	; 40
     67a:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     68a:	86 e0       	ldi	r24, 0x06	; 6
     68c:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     690:	8c e0       	ldi	r24, 0x0C	; 12
     692:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     696:	8f e3       	ldi	r24, 0x3F	; 63
     698:	9f e1       	ldi	r25, 0x1F	; 31
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_Initialize+0x74>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_Initialize+0x7a>
     6a0:	00 00       	nop
     6a2:	08 95       	ret

000006a4 <LCD_Write_Character>:
     6a4:	cf 93       	push	r28
     6a6:	c8 2f       	mov	r28, r24
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     6c6:	88 b3       	in	r24, 0x18	; 24
     6c8:	9c 2f       	mov	r25, r28
     6ca:	90 7f       	andi	r25, 0xF0	; 240
     6cc:	8f 70       	andi	r24, 0x0F	; 15
     6ce:	89 2b       	or	r24, r25
     6d0:	88 bb       	out	0x18, r24	; 24
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	63 e0       	ldi	r22, 0x03	; 3
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     6dc:	8f e9       	ldi	r24, 0x9F	; 159
     6de:	9f e0       	ldi	r25, 0x0F	; 15
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_Write_Character+0x3c>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_Write_Character+0x42>
     6e6:	00 00       	nop
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	63 e0       	ldi	r22, 0x03	; 3
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     6f2:	28 b3       	in	r18, 0x18	; 24
     6f4:	30 e1       	ldi	r19, 0x10	; 16
     6f6:	c3 9f       	mul	r28, r19
     6f8:	c0 01       	movw	r24, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	92 2f       	mov	r25, r18
     6fe:	9f 70       	andi	r25, 0x0F	; 15
     700:	89 2b       	or	r24, r25
     702:	88 bb       	out	0x18, r24	; 24
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     70e:	8f e9       	ldi	r24, 0x9F	; 159
     710:	9f e0       	ldi	r25, 0x0F	; 15
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <LCD_Write_Character+0x6e>
     716:	00 c0       	rjmp	.+0      	; 0x718 <LCD_Write_Character+0x74>
     718:	00 00       	nop
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	63 e0       	ldi	r22, 0x03	; 3
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     724:	8f e3       	ldi	r24, 0x3F	; 63
     726:	9f e1       	ldi	r25, 0x1F	; 31
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_Write_Character+0x84>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <LCD_Write_Character+0x8a>
     72e:	00 00       	nop
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <LCD_Write_String>:
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	ec 01       	movw	r28, r24
     73a:	88 81       	ld	r24, Y
     73c:	88 23       	and	r24, r24
     73e:	61 f0       	breq	.+24     	; 0x758 <LCD_Write_String+0x24>
     740:	21 96       	adiw	r28, 0x01	; 1
     742:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD_Write_Character>
     746:	8f e3       	ldi	r24, 0x3F	; 63
     748:	9c e9       	ldi	r25, 0x9C	; 156
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <LCD_Write_String+0x16>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <LCD_Write_String+0x1c>
     750:	00 00       	nop
     752:	89 91       	ld	r24, Y+
     754:	81 11       	cpse	r24, r1
     756:	f5 cf       	rjmp	.-22     	; 0x742 <LCD_Write_String+0xe>
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <LCD_Write_IntegerNumber>:
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	2a 97       	sbiw	r28, 0x0a	; 10
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	2a e0       	ldi	r18, 0x0A	; 10
     774:	ae 01       	movw	r20, r28
     776:	4f 5f       	subi	r20, 0xFF	; 255
     778:	5f 4f       	sbci	r21, 0xFF	; 255
     77a:	0e 94 09 08 	call	0x1012	; 0x1012 <__ltoa_ncheck>
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Write_String>
     786:	2a 96       	adiw	r28, 0x0a	; 10
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <LCD_Write_Location>:
void LCD_Write_Location(row Rows, column Columns)
{
	uint8_t location = 0;
	switch(Rows)
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	49 f0       	breq	.+18     	; 0x7ae <LCD_Write_Location+0x16>
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <LCD_Write_Location+0x10>
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	49 f0       	breq	.+18     	; 0x7b4 <LCD_Write_Location+0x1c>
     7a2:	83 30       	cpi	r24, 0x03	; 3
     7a4:	51 f0       	breq	.+20     	; 0x7ba <LCD_Write_Location+0x22>
     7a6:	0c c0       	rjmp	.+24     	; 0x7c0 <LCD_Write_Location+0x28>
	{
		case ROW0:
		location = 0x80 + Columns;
     7a8:	80 e8       	ldi	r24, 0x80	; 128
     7aa:	86 0f       	add	r24, r22
		break;
     7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <LCD_Write_Location+0x2a>
		case ROW1:
		location = 0xC0 + Columns;
     7ae:	80 ec       	ldi	r24, 0xC0	; 192
     7b0:	86 0f       	add	r24, r22
		break;
     7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <LCD_Write_Location+0x2a>
		case ROW2:
		location = 0x94 + Columns;
     7b4:	84 e9       	ldi	r24, 0x94	; 148
     7b6:	86 0f       	add	r24, r22
		break;
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <LCD_Write_Location+0x2a>
		case ROW3:
		location = 0xD4 + Columns;
     7ba:	84 ed       	ldi	r24, 0xD4	; 212
     7bc:	86 0f       	add	r24, r22
		break;
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <LCD_Write_Location+0x2a>
	ftoa(FltNumber, Fnum, 3);// Float to ASCII
	LCD_Write_String((uint8_t*)Fnum);
}
void LCD_Write_Location(row Rows, column Columns)
{
	uint8_t location = 0;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		case ROW3:
		location = 0xD4 + Columns;
		break;
	}
	LCD_Write_Command(location);
     7c2:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_Write_Command>
     7c6:	08 95       	ret

000007c8 <SEVSENSEGMENT_Initialize>:
{
	DIO_SetPinValue(SEVESEG_CONTROL_PORT, SEVSEG_CONTROL_DIP, SEVSEG_HIGH);
}
void SEVSENSEGMENT_DisableDecimalPoint(void)
{
	DIO_SetPinValue(SEVESEG_CONTROL_PORT, SEVSEG_CONTROL_DIP, SEVSEG_LOW);
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	64 e0       	ldi	r22, 0x04	; 4
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     7d2:	41 e0       	ldi	r20, 0x01	; 1
     7d4:	65 e0       	ldi	r22, 0x05	; 5
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	66 e0       	ldi	r22, 0x06	; 6
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	67 e0       	ldi	r22, 0x07	; 7
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	62 e0       	ldi	r22, 0x02	; 2
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     80e:	08 95       	ret

00000810 <SEVSENSEGMENT_EnableSegment1>:
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	65 e0       	ldi	r22, 0x05	; 5
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     824:	08 95       	ret

00000826 <SEVSENSEGMENT_DisableSegment1>:
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	65 e0       	ldi	r22, 0x05	; 5
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     83a:	08 95       	ret

0000083c <SEVSENSEGMENT_EnableSegment2>:
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	62 e0       	ldi	r22, 0x02	; 2
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     846:	41 e0       	ldi	r20, 0x01	; 1
     848:	65 e0       	ldi	r22, 0x05	; 5
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     850:	08 95       	ret

00000852 <SEVSENSEGMENT_DisableSegment2>:
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	65 e0       	ldi	r22, 0x05	; 5
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     866:	08 95       	ret

00000868 <SEVSENSEGMENT_DisplayNumber>:
}

void SEVSENSEGMENT_DisplayNumber(uint8_t number)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	d8 2f       	mov	r29, r24
	uint8_t tens  =  number /10 ;
     86e:	cd ec       	ldi	r28, 0xCD	; 205
     870:	8c 9f       	mul	r24, r28
     872:	c1 2d       	mov	r28, r1
     874:	11 24       	eor	r1, r1
     876:	c6 95       	lsr	r28
     878:	c6 95       	lsr	r28
     87a:	c6 95       	lsr	r28
	uint8_t units = number %10;


	SEVSEG_PORT = tens << 4;
     87c:	8c 2f       	mov	r24, r28
     87e:	82 95       	swap	r24
     880:	80 7f       	andi	r24, 0xF0	; 240
     882:	8b bb       	out	0x1b, r24	; 27
	SEVSENSEGMENT_EnableSegment1();
     884:	0e 94 08 04 	call	0x810	; 0x810 <SEVSENSEGMENT_EnableSegment1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     888:	2f e7       	ldi	r18, 0x7F	; 127
     88a:	88 e3       	ldi	r24, 0x38	; 56
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	90 40       	sbci	r25, 0x00	; 0
     894:	e1 f7       	brne	.-8      	; 0x88e <SEVSENSEGMENT_DisplayNumber+0x26>
     896:	00 c0       	rjmp	.+0      	; 0x898 <SEVSENSEGMENT_DisplayNumber+0x30>
     898:	00 00       	nop
	_delay_ms(25);
	SEVSENSEGMENT_DisableSegment1();
     89a:	0e 94 13 04 	call	0x826	; 0x826 <SEVSENSEGMENT_DisableSegment1>
}

void SEVSENSEGMENT_DisplayNumber(uint8_t number)
{
	uint8_t tens  =  number /10 ;
	uint8_t units = number %10;
     89e:	cc 0f       	add	r28, r28
     8a0:	8c 2f       	mov	r24, r28
     8a2:	88 0f       	add	r24, r24
     8a4:	88 0f       	add	r24, r24
     8a6:	c8 0f       	add	r28, r24
     8a8:	dc 1b       	sub	r29, r28
	SEVSEG_PORT = tens << 4;
	SEVSENSEGMENT_EnableSegment1();
	_delay_ms(25);
	SEVSENSEGMENT_DisableSegment1();
	
	SEVSEG_PORT = units << 4;
     8aa:	d2 95       	swap	r29
     8ac:	d0 7f       	andi	r29, 0xF0	; 240
     8ae:	db bb       	out	0x1b, r29	; 27
	SEVSENSEGMENT_EnableSegment2();
     8b0:	0e 94 1e 04 	call	0x83c	; 0x83c <SEVSENSEGMENT_EnableSegment2>
     8b4:	2f e7       	ldi	r18, 0x7F	; 127
     8b6:	88 e3       	ldi	r24, 0x38	; 56
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	21 50       	subi	r18, 0x01	; 1
     8bc:	80 40       	sbci	r24, 0x00	; 0
     8be:	90 40       	sbci	r25, 0x00	; 0
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <SEVSENSEGMENT_DisplayNumber+0x52>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <SEVSENSEGMENT_DisplayNumber+0x5c>
     8c4:	00 00       	nop
	_delay_ms(25);
	SEVSENSEGMENT_DisableSegment2();
     8c6:	0e 94 29 04 	call	0x852	; 0x852 <SEVSENSEGMENT_DisableSegment2>
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <SEVSENSEGMENT_OFF>:

void SEVSENSEGMENT_OFF(void)
{
	 SEVSENSEGMENT_DisableSegment1();
     8d0:	0e 94 13 04 	call	0x826	; 0x826 <SEVSENSEGMENT_DisableSegment1>
	 SEVSENSEGMENT_DisableSegment2();
     8d4:	0e 94 29 04 	call	0x852	; 0x852 <SEVSENSEGMENT_DisableSegment2>
     8d8:	08 95       	ret

000008da <EEPROM_Initialize>:
#include "TWI_Interface.h"
//#include "LCD_Interface.h"	

void EEPROM_Initialize(void)
{
	TWI_voidPeripheralInitialize(_TWI_SlaveAddress0);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 67 05 	call	0xace	; 0xace <TWI_voidPeripheralInitialize>
     8e0:	08 95       	ret

000008e2 <EEPROM_Write_DataByte>:
}
// Write byte
void EEPROM_Write_DataByte(uint16_t wordAddress, uint8_t dataTransmit)
{
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	18 2f       	mov	r17, r24
     8ea:	c9 2f       	mov	r28, r25
     8ec:	d6 2f       	mov	r29, r22
	uint8_t wordAddressL = wordAddress;
	uint8_t wordAddressH = (((wordAddress>>8)&0x07) | 0x50);
	TWI_voidMasterSendStartCondition();
     8ee:	0e 94 74 05 	call	0xae8	; 0xae8 <TWI_voidMasterSendStartCondition>
}
// Write byte
void EEPROM_Write_DataByte(uint16_t wordAddress, uint8_t dataTransmit)
{
	uint8_t wordAddressL = wordAddress;
	uint8_t wordAddressH = (((wordAddress>>8)&0x07) | 0x50);
     8f2:	8c 2f       	mov	r24, r28
     8f4:	87 70       	andi	r24, 0x07	; 7
	TWI_voidMasterSendStartCondition();
	
	TWI_voidMasterSendSlaveAddressWithWriteOperation(wordAddressH);
     8f6:	80 65       	ori	r24, 0x50	; 80
     8f8:	0e 94 91 05 	call	0xb22	; 0xb22 <TWI_voidMasterSendSlaveAddressWithWriteOperation>
	
	TWI_voidMasterTransmitDataByteWithACK(wordAddressL);
     8fc:	81 2f       	mov	r24, r17
     8fe:	0e 94 b3 05 	call	0xb66	; 0xb66 <TWI_voidMasterTransmitDataByteWithACK>
	
	TWI_voidMasterTransmitDataByteWithACK(dataTransmit);
     902:	8d 2f       	mov	r24, r29
     904:	0e 94 b3 05 	call	0xb66	; 0xb66 <TWI_voidMasterTransmitDataByteWithACK>
	
	TWI_voidMasterSendStopCondition();
     908:	0e 94 84 05 	call	0xb08	; 0xb08 <TWI_voidMasterSendStopCondition>
     90c:	8f e1       	ldi	r24, 0x1F	; 31
     90e:	9e e4       	ldi	r25, 0x4E	; 78
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <EEPROM_Write_DataByte+0x2e>
     914:	00 c0       	rjmp	.+0      	; 0x916 <EEPROM_Write_DataByte+0x34>
     916:	00 00       	nop
	
	_delay_ms(5);
	return;
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	08 95       	ret

00000920 <EEPROM_Read_DataByte>:
// Random read byte
uint8_t EEPROM_Read_DataByte(uint16_t wordAddress)
{
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	1f 92       	push	r1
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	08 2f       	mov	r16, r24
	
	uint8_t dataReceived = 0;
     930:	19 82       	std	Y+1, r1	; 0x01
	uint8_t wordAddressL = wordAddress;
	uint8_t wordAddressH = (wordAddress >> 8) | 0x50;
     932:	19 2f       	mov	r17, r25
     934:	10 65       	ori	r17, 0x50	; 80
	
	TWI_voidPeripheralInitialize(_TWI_SlaveAddress0);
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 67 05 	call	0xace	; 0xace <TWI_voidPeripheralInitialize>
	
	TWI_voidMasterSendStartCondition();
     93c:	0e 94 74 05 	call	0xae8	; 0xae8 <TWI_voidMasterSendStartCondition>
	
	
	TWI_voidMasterSendSlaveAddressWithWriteOperation(wordAddressH);
     940:	81 2f       	mov	r24, r17
     942:	0e 94 91 05 	call	0xb22	; 0xb22 <TWI_voidMasterSendSlaveAddressWithWriteOperation>
	
	
	TWI_voidMasterTransmitDataByteWithACK(wordAddressL);
     946:	80 2f       	mov	r24, r16
     948:	0e 94 b3 05 	call	0xb66	; 0xb66 <TWI_voidMasterTransmitDataByteWithACK>
	
	
	TWI_voidMasterSendRepeatedStartCondition();
     94c:	0e 94 87 05 	call	0xb0e	; 0xb0e <TWI_voidMasterSendRepeatedStartCondition>
	
	
	TWI_voidMasterSendSlaveAddressWithReadOperation(wordAddressH);
     950:	81 2f       	mov	r24, r17
     952:	0e 94 a3 05 	call	0xb46	; 0xb46 <TWI_voidMasterSendSlaveAddressWithReadOperation>
	
	
	TWI_voidMasterReceiveDataByteWithNoACK(&dataReceived);
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <TWI_voidMasterReceiveDataByteWithNoACK>
	
	
	TWI_voidMasterSendStopCondition();
     95e:	0e 94 84 05 	call	0xb08	; 0xb08 <TWI_voidMasterSendStopCondition>
     962:	8f e1       	ldi	r24, 0x1F	; 31
     964:	9e e4       	ldi	r25, 0x4E	; 78
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <EEPROM_Read_DataByte+0x46>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <EEPROM_Read_DataByte+0x4c>
     96c:	00 00       	nop
	
	
	_delay_ms(5);
	return dataReceived;
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	08 95       	ret

0000097c <ON_LED_Initialize>:

#include "ON_LED_Interface.h"

void ON_LED_Initialize(void)
{
	DIO_SetPinDirection(ON_LED_PORT, ON_LED, ON_LED_OUTPUT);
     97c:	41 e0       	ldi	r20, 0x01	; 1
     97e:	64 e0       	ldi	r22, 0x04	; 4
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     986:	08 95       	ret

00000988 <ON_LED_ON>:
}
void ON_LED_ON(void)
{
	DIO_SetPinValue(ON_LED_PORT, ON_LED, ON_LED_HIGH);
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	64 e0       	ldi	r22, 0x04	; 4
     98c:	83 e0       	ldi	r24, 0x03	; 3
     98e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     992:	08 95       	ret

00000994 <ON_LED_OFF>:
}
void ON_LED_OFF(void)
{
	DIO_SetPinValue(ON_LED_PORT, ON_LED, ON_LED_LOW);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	64 e0       	ldi	r22, 0x04	; 4
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     99e:	08 95       	ret

000009a0 <HEATING_LED_Initialize>:
{
	DIO_SetPinDirection(HEATING_LED_PORT, HEATING_LED, HEATING_LED_OUTPUT);
}
void HEATING_LED_ON(void)
{
	DIO_SetPinValue(HEATING_LED_PORT, HEATING_LED, HEATING_LED_HIGH);
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	65 e0       	ldi	r22, 0x05	; 5
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     9aa:	08 95       	ret

000009ac <HEATING_LED_OFF>:
}
void HEATING_LED_OFF(void)
{
	DIO_SetPinValue(HEATING_LED_PORT, HEATING_LED, HEATING_LED_LOW);
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	65 e0       	ldi	r22, 0x05	; 5
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     9b6:	08 95       	ret

000009b8 <HEATING_LED_TGL>:
}

void HEATING_LED_TGL(void)
{
	DIO_TogglePinDirection(HEATING_LED_PORT, HEATING_LED);
     9b8:	65 e0       	ldi	r22, 0x05	; 5
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <DIO_TogglePinDirection>
     9c0:	08 95       	ret

000009c2 <COOLING_LED_Initialize>:

#include "COOLING_LED_Interface.h"

void COOLING_LED_Initialize(void)
{
	DIO_SetPinDirection(COOLING_LED_PORT, COOLING_LED, COOLING_LED_OUTPUT);
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	66 e0       	ldi	r22, 0x06	; 6
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     9cc:	08 95       	ret

000009ce <COOLING_LED_ON>:
}
void COOLING_LED_ON(void)
{
	DIO_SetPinValue(COOLING_LED_PORT, COOLING_LED, COOLING_LED_HIGH);
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	66 e0       	ldi	r22, 0x06	; 6
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     9d8:	08 95       	ret

000009da <COOLING_LED_OFF>:
}
void COOLING_LED_OFF(void)
{
	DIO_SetPinValue(COOLING_LED_PORT, COOLING_LED, COOLING_LED_LOW);
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	66 e0       	ldi	r22, 0x06	; 6
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     9e4:	08 95       	ret

000009e6 <CoolerRelay_Initialize>:


#include "CoolerRelay_Interface.h"

void CoolerRelay_Initialize(void){
	DIO_SetPinDirection(CoolerRelay_PORT, CoolerRelay, CoolerRelay_OUTPUT);
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	67 e0       	ldi	r22, 0x07	; 7
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     9f0:	08 95       	ret

000009f2 <CoolerRelay_On>:
}
void CoolerRelay_On(void){
	DIO_SetPinValue(CoolerRelay_PORT, CoolerRelay, CoolerRelay_HIGH);
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	67 e0       	ldi	r22, 0x07	; 7
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     9fc:	08 95       	ret

000009fe <CoolerRelay_Off>:
}
void CoolerRelay_Off(void){
	DIO_SetPinValue(CoolerRelay_PORT, CoolerRelay, CoolerRelay_LOW);
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	67 e0       	ldi	r22, 0x07	; 7
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     a08:	08 95       	ret

00000a0a <HeaterRelay_Initialize>:


#include "HeaterRelay_Interface.h"

void HeaterRelay_Initialize(void){
	DIO_SetPinDirection(HeaterRelay_PORT, HeaterRelay, HeaterRelay_OUTPUT);
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	66 e0       	ldi	r22, 0x06	; 6
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	0e 94 cc 05 	call	0xb98	; 0xb98 <DIO_SetPinDirection>
     a14:	08 95       	ret

00000a16 <HeaterRelay_On>:

}
void HeaterRelay_On(void){
	DIO_SetPinValue(HeaterRelay_PORT, HeaterRelay, HeaterRelay_HIGH);
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	66 e0       	ldi	r22, 0x06	; 6
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     a20:	08 95       	ret

00000a22 <HeaterRelay_Off>:
}
void HeaterRelay_Off(void){
	DIO_SetPinValue(HeaterRelay_PORT, HeaterRelay, HeaterRelay_LOW);
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	66 e0       	ldi	r22, 0x06	; 6
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	0e 94 3d 06 	call	0xc7a	; 0xc7a <DIO_SetPinValue>
     a2c:	08 95       	ret

00000a2e <LM35_Initialize>:
 */ 

#include "LM35_Interface.h"
void LM35_Initialize(void) {
	// Initialize the ADC module with configured reference voltage and prescaler
	ADC_Initialize_WithoutInterrupt(LM35_ADC_VREF, LM35_ADC_PRESCALER);
     a2e:	66 e0       	ldi	r22, 0x06	; 6
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 35 05 	call	0xa6a	; 0xa6a <ADC_Initialize_WithoutInterrupt>
     a36:	08 95       	ret

00000a38 <LM35_ReadTemperature>:
}

uint16_t LM35_ReadTemperature(void) {
	// Read the ADC value from the configured channel
	uint16_t adcValue = ADC_Read(LM35_ADC_CHANNEL);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <ADC_Read>

	// Convert ADC value to temperature in millivolts
	uint32_t millivolts = ((uint32_t)adcValue * 5000) / 1024;
     a3e:	9c 01       	movw	r18, r24
     a40:	a8 e8       	ldi	r26, 0x88	; 136
     a42:	b3 e1       	ldi	r27, 0x13	; 19
     a44:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__umulhisi3>
     a48:	05 2e       	mov	r0, r21
     a4a:	5a e0       	ldi	r21, 0x0A	; 10
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	77 95       	ror	r23
     a52:	67 95       	ror	r22
     a54:	5a 95       	dec	r21
     a56:	d1 f7       	brne	.-12     	; 0xa4c <LM35_ReadTemperature+0x14>
     a58:	50 2d       	mov	r21, r0

	// Convert millivolts to temperature (10mV per degree Celsius for LM35)
	uint16_t temperature = millivolts / 10;
     a5a:	2a e0       	ldi	r18, 0x0A	; 10
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 b3 07 	call	0xf66	; 0xf66 <__udivmodsi4>

	return temperature;
     a66:	c9 01       	movw	r24, r18
     a68:	08 95       	ret

00000a6a <ADC_Initialize_WithoutInterrupt>:
void ADC_Initialize_WithInterrupt(adc_vref vref, adc_prescaler prescaler) {
	// Set reference voltage
	_ADC_ADMUX = (vref << 6); // Bits 7:6 for VREF

	// Enable ADC, set prescaler, and enable interrupts
	_ADC_ADCSRA = (1 << ADEN) | (1 << ADIE) | (prescaler & 0x07); // Bits 2:0 for prescaler
     a6a:	82 95       	swap	r24
     a6c:	88 0f       	add	r24, r24
     a6e:	88 0f       	add	r24, r24
     a70:	80 7c       	andi	r24, 0xC0	; 192
     a72:	87 b9       	out	0x07, r24	; 7
     a74:	67 70       	andi	r22, 0x07	; 7
     a76:	60 68       	ori	r22, 0x80	; 128
     a78:	66 b9       	out	0x06, r22	; 6
     a7a:	08 95       	ret

00000a7c <ADC_Read>:
	3- Start conversion
	4- Wait until end conversion
	5- Return reading
	*/
	uint16_t ADC_read = 0;
	switch (channel)
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	88 30       	cpi	r24, 0x08	; 8
     a80:	91 05       	cpc	r25, r1
     a82:	e8 f4       	brcc	.+58     	; 0xabe <ADC_Read+0x42>
     a84:	fc 01       	movw	r30, r24
     a86:	e6 5d       	subi	r30, 0xD6	; 214
     a88:	ff 4f       	sbci	r31, 0xFF	; 255
     a8a:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__tablejump2__>
	{
		case ADC_channel_0:
		_ADC_ADMUX = 0x40;//0b 010 00000
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	87 b9       	out	0x07, r24	; 7
		break;
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_1:
		_ADC_ADMUX = 0x41;//0b 010 00001
     a94:	81 e4       	ldi	r24, 0x41	; 65
     a96:	87 b9       	out	0x07, r24	; 7
		break;
     a98:	14 c0       	rjmp	.+40     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_2:
		_ADC_ADMUX = 0x42;//0b 010 00010
     a9a:	82 e4       	ldi	r24, 0x42	; 66
     a9c:	87 b9       	out	0x07, r24	; 7
		break;
     a9e:	11 c0       	rjmp	.+34     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_3:
		_ADC_ADMUX = 0x43;//0b 010 00011
     aa0:	83 e4       	ldi	r24, 0x43	; 67
     aa2:	87 b9       	out	0x07, r24	; 7
		break;
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_4:
		_ADC_ADMUX = 0x44;//0b 010 00100
     aa6:	84 e4       	ldi	r24, 0x44	; 68
     aa8:	87 b9       	out	0x07, r24	; 7
		break;
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_5:
		_ADC_ADMUX = 0x45;//0b 010 00101
     aac:	85 e4       	ldi	r24, 0x45	; 69
     aae:	87 b9       	out	0x07, r24	; 7
		break;
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_6:
		_ADC_ADMUX = 0x46;//0b 010 00110
     ab2:	86 e4       	ldi	r24, 0x46	; 70
     ab4:	87 b9       	out	0x07, r24	; 7
		break;
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <ADC_Read+0x46>
		case ADC_channel_7:
		_ADC_ADMUX = 0x47;//0b 0100 0111
     ab8:	87 e4       	ldi	r24, 0x47	; 71
     aba:	87 b9       	out	0x07, r24	; 7
		break;
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <ADC_Read+0x46>
		default:
		_ADC_ADMUX = 0x40;
     abe:	80 e4       	ldi	r24, 0x40	; 64
     ac0:	87 b9       	out	0x07, r24	; 7
		break;
	}
	_ADC_ADCSRA |= (1<<ADSC);
     ac2:	36 9a       	sbi	0x06, 6	; 6
	while (get_bit(_ADC_ADCSRA, ADIF) != 1);
     ac4:	34 9b       	sbis	0x06, 4	; 6
     ac6:	fe cf       	rjmp	.-4      	; 0xac4 <ADC_Read+0x48>
	ADC_read = _ADC_DATA;
     ac8:	84 b1       	in	r24, 0x04	; 4
     aca:	95 b1       	in	r25, 0x05	; 5
	return ADC_read;
     acc:	08 95       	ret

00000ace <TWI_voidPeripheralInitialize>:
{
	_TWI_TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWINT); // Reinitialize flag + Enable TWI + Enable Acknowledgment
	while (get_bit(_TWI_TWCR, TWINT) != 1);         // Wait until job finish
	while((TWSR & 0xF8) != MASTER_RD_BYTE_ACK);     // Wait until receive write acknowledgment
	_TWI_TWCR &=~(1<<TWEA);                         // Disable acknowledgment
	*dataReceived = _TWI_TWDR;                      // Read received data
     ace:	91 b1       	in	r25, 0x01	; 1
     ad0:	9c 7f       	andi	r25, 0xFC	; 252
     ad2:	91 b9       	out	0x01, r25	; 1
     ad4:	90 b1       	in	r25, 0x00	; 0
     ad6:	9c 60       	ori	r25, 0x0C	; 12
     ad8:	90 b9       	out	0x00, r25	; 0
     ada:	88 0f       	add	r24, r24
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	82 b9       	out	0x02, r24	; 2
     ae0:	86 b7       	in	r24, 0x36	; 54
     ae2:	84 6c       	ori	r24, 0xC4	; 196
     ae4:	86 bf       	out	0x36, r24	; 54
     ae6:	08 95       	ret

00000ae8 <TWI_voidMasterSendStartCondition>:
     ae8:	84 ea       	ldi	r24, 0xA4	; 164
     aea:	86 bf       	out	0x36, r24	; 54
     aec:	06 b6       	in	r0, 0x36	; 54
     aee:	07 fe       	sbrs	r0, 7
     af0:	fd cf       	rjmp	.-6      	; 0xaec <TWI_voidMasterSendStartCondition+0x4>
     af2:	81 b1       	in	r24, 0x01	; 1
     af4:	88 7f       	andi	r24, 0xF8	; 248
     af6:	88 30       	cpi	r24, 0x08	; 8
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <TWI_voidMasterSendStartCondition+0xa>
     afa:	8f e1       	ldi	r24, 0x1F	; 31
     afc:	9e e4       	ldi	r25, 0x4E	; 78
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <TWI_voidMasterSendStartCondition+0x16>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <TWI_voidMasterSendStartCondition+0x1c>
     b04:	00 00       	nop
     b06:	08 95       	ret

00000b08 <TWI_voidMasterSendStopCondition>:
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	86 bf       	out	0x36, r24	; 54
     b0c:	08 95       	ret

00000b0e <TWI_voidMasterSendRepeatedStartCondition>:
     b0e:	84 ea       	ldi	r24, 0xA4	; 164
     b10:	86 bf       	out	0x36, r24	; 54
     b12:	06 b6       	in	r0, 0x36	; 54
     b14:	07 fe       	sbrs	r0, 7
     b16:	fd cf       	rjmp	.-6      	; 0xb12 <TWI_voidMasterSendRepeatedStartCondition+0x4>
     b18:	81 b1       	in	r24, 0x01	; 1
     b1a:	88 7f       	andi	r24, 0xF8	; 248
     b1c:	80 31       	cpi	r24, 0x10	; 16
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <TWI_voidMasterSendRepeatedStartCondition+0xa>
     b20:	08 95       	ret

00000b22 <TWI_voidMasterSendSlaveAddressWithWriteOperation>:
     b22:	88 23       	and	r24, r24
     b24:	7c f0       	brlt	.+30     	; 0xb44 <TWI_voidMasterSendSlaveAddressWithWriteOperation+0x22>
     b26:	88 0f       	add	r24, r24
     b28:	83 b9       	out	0x03, r24	; 3
     b2a:	86 b7       	in	r24, 0x36	; 54
     b2c:	8f 7d       	andi	r24, 0xDF	; 223
     b2e:	86 bf       	out	0x36, r24	; 54
     b30:	86 b7       	in	r24, 0x36	; 54
     b32:	84 68       	ori	r24, 0x84	; 132
     b34:	86 bf       	out	0x36, r24	; 54
     b36:	06 b6       	in	r0, 0x36	; 54
     b38:	07 fe       	sbrs	r0, 7
     b3a:	fd cf       	rjmp	.-6      	; 0xb36 <TWI_voidMasterSendSlaveAddressWithWriteOperation+0x14>
     b3c:	81 b1       	in	r24, 0x01	; 1
     b3e:	88 7f       	andi	r24, 0xF8	; 248
     b40:	88 31       	cpi	r24, 0x18	; 24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <TWI_voidMasterSendSlaveAddressWithWriteOperation+0x1a>
     b44:	08 95       	ret

00000b46 <TWI_voidMasterSendSlaveAddressWithReadOperation>:
     b46:	88 23       	and	r24, r24
     b48:	6c f0       	brlt	.+26     	; 0xb64 <TWI_voidMasterSendSlaveAddressWithReadOperation+0x1e>
     b4a:	88 0f       	add	r24, r24
     b4c:	81 60       	ori	r24, 0x01	; 1
     b4e:	83 b9       	out	0x03, r24	; 3
     b50:	86 b7       	in	r24, 0x36	; 54
     b52:	84 6a       	ori	r24, 0xA4	; 164
     b54:	86 bf       	out	0x36, r24	; 54
     b56:	06 b6       	in	r0, 0x36	; 54
     b58:	07 fe       	sbrs	r0, 7
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <TWI_voidMasterSendSlaveAddressWithReadOperation+0x10>
     b5c:	81 b1       	in	r24, 0x01	; 1
     b5e:	88 7f       	andi	r24, 0xF8	; 248
     b60:	80 34       	cpi	r24, 0x40	; 64
     b62:	e1 f7       	brne	.-8      	; 0xb5c <TWI_voidMasterSendSlaveAddressWithReadOperation+0x16>
     b64:	08 95       	ret

00000b66 <TWI_voidMasterTransmitDataByteWithACK>:
     b66:	83 b9       	out	0x03, r24	; 3
     b68:	86 b7       	in	r24, 0x36	; 54
     b6a:	84 68       	ori	r24, 0x84	; 132
     b6c:	86 bf       	out	0x36, r24	; 54
     b6e:	06 b6       	in	r0, 0x36	; 54
     b70:	07 fe       	sbrs	r0, 7
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <TWI_voidMasterTransmitDataByteWithACK+0x8>
     b74:	81 b1       	in	r24, 0x01	; 1
     b76:	88 7f       	andi	r24, 0xF8	; 248
     b78:	88 32       	cpi	r24, 0x28	; 40
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <TWI_voidMasterTransmitDataByteWithACK+0xe>
     b7c:	08 95       	ret

00000b7e <TWI_voidMasterReceiveDataByteWithNoACK>:
}

void TWI_voidMasterReceiveDataByteWithNoACK(uint8_t* dataReceived)
{
     b7e:	fc 01       	movw	r30, r24
	  // Enable TWI and clear interrupt flag
	  _TWI_TWCR = (1 << TWEN) | (1 << TWINT);
     b80:	84 e8       	ldi	r24, 0x84	; 132
     b82:	86 bf       	out	0x36, r24	; 54

	  // Wait until TWI finishes the operation
	  while (get_bit(_TWI_TWCR, TWINT) != 1);
     b84:	06 b6       	in	r0, 0x36	; 54
     b86:	07 fe       	sbrs	r0, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <TWI_voidMasterReceiveDataByteWithNoACK+0x6>

	   //Check for successful data reception without acknowledgment
	  while ((_TWI_TWSR & 0xF8) != 0x58) {  // 0x58 is the expected status for no ACK after byte read
     b8a:	91 b1       	in	r25, 0x01	; 1
     b8c:	98 7f       	andi	r25, 0xF8	; 248
     b8e:	98 35       	cpi	r25, 0x58	; 88
     b90:	e1 f7       	brne	.-8      	; 0xb8a <TWI_voidMasterReceiveDataByteWithNoACK+0xc>
		  // Optionally handle timeout or error
	  }

	  // Store received data
	  *dataReceived = _TWI_TWDR;
     b92:	83 b1       	in	r24, 0x03	; 3
     b94:	80 83       	st	Z, r24
     b96:	08 95       	ret

00000b98 <DIO_SetPinDirection>:
#include "DIO_Interface.h"

// MicroController pin direction
void DIO_SetPinDirection(dioPort port, dioPin pin, dioState state)
{
	switch (state)
     b98:	44 23       	and	r20, r20
     b9a:	19 f0       	breq	.+6      	; 0xba2 <DIO_SetPinDirection+0xa>
     b9c:	41 30       	cpi	r20, 0x01	; 1
     b9e:	c9 f1       	breq	.+114    	; 0xc12 <DIO_SetPinDirection+0x7a>
     ba0:	08 95       	ret
	{
		case DIO_INPUT:
		switch (port)
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 f0       	breq	.+36     	; 0xbca <DIO_SetPinDirection+0x32>
     ba6:	28 f0       	brcs	.+10     	; 0xbb2 <DIO_SetPinDirection+0x1a>
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	d9 f0       	breq	.+54     	; 0xbe2 <DIO_SetPinDirection+0x4a>
     bac:	83 30       	cpi	r24, 0x03	; 3
     bae:	29 f1       	breq	.+74     	; 0xbfa <DIO_SetPinDirection+0x62>
     bb0:	08 95       	ret
		{
			case DIO_PORTA: clr_bit(_DIO_DDRA, pin); break;
     bb2:	2a b3       	in	r18, 0x1a	; 26
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_SetPinDirection+0x26>
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	6a 95       	dec	r22
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_SetPinDirection+0x22>
     bc2:	80 95       	com	r24
     bc4:	82 23       	and	r24, r18
     bc6:	8a bb       	out	0x1a, r24	; 26
     bc8:	08 95       	ret
			case DIO_PORTB: clr_bit(_DIO_DDRB, pin); break;
     bca:	27 b3       	in	r18, 0x17	; 23
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <DIO_SetPinDirection+0x3e>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	6a 95       	dec	r22
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <DIO_SetPinDirection+0x3a>
     bda:	80 95       	com	r24
     bdc:	82 23       	and	r24, r18
     bde:	87 bb       	out	0x17, r24	; 23
     be0:	08 95       	ret
			case DIO_PORTC: clr_bit(_DIO_DDRC, pin); break;
     be2:	24 b3       	in	r18, 0x14	; 20
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_SetPinDirection+0x56>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	6a 95       	dec	r22
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_SetPinDirection+0x52>
     bf2:	80 95       	com	r24
     bf4:	82 23       	and	r24, r18
     bf6:	84 bb       	out	0x14, r24	; 20
     bf8:	08 95       	ret
			case DIO_PORTD: clr_bit(_DIO_DDRD, pin); break;
     bfa:	21 b3       	in	r18, 0x11	; 17
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_SetPinDirection+0x6e>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	6a 95       	dec	r22
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_SetPinDirection+0x6a>
     c0a:	80 95       	com	r24
     c0c:	82 23       	and	r24, r18
     c0e:	81 bb       	out	0x11, r24	; 17
     c10:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (port)
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	89 f0       	breq	.+34     	; 0xc38 <DIO_SetPinDirection+0xa0>
     c16:	28 f0       	brcs	.+10     	; 0xc22 <DIO_SetPinDirection+0x8a>
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	c9 f0       	breq	.+50     	; 0xc4e <DIO_SetPinDirection+0xb6>
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	11 f1       	breq	.+68     	; 0xc64 <DIO_SetPinDirection+0xcc>
     c20:	08 95       	ret
		{
			case DIO_PORTA: set_bit(_DIO_DDRA, pin); break;
     c22:	2a b3       	in	r18, 0x1a	; 26
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_SetPinDirection+0x96>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	6a 95       	dec	r22
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_SetPinDirection+0x92>
     c32:	82 2b       	or	r24, r18
     c34:	8a bb       	out	0x1a, r24	; 26
     c36:	08 95       	ret
			case DIO_PORTB: set_bit(_DIO_DDRB, pin); break;
     c38:	27 b3       	in	r18, 0x17	; 23
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_SetPinDirection+0xac>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	6a 95       	dec	r22
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_SetPinDirection+0xa8>
     c48:	82 2b       	or	r24, r18
     c4a:	87 bb       	out	0x17, r24	; 23
     c4c:	08 95       	ret
			case DIO_PORTC: set_bit(_DIO_DDRC, pin); break;
     c4e:	24 b3       	in	r18, 0x14	; 20
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_SetPinDirection+0xc2>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	6a 95       	dec	r22
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_SetPinDirection+0xbe>
     c5e:	82 2b       	or	r24, r18
     c60:	84 bb       	out	0x14, r24	; 20
     c62:	08 95       	ret
			case DIO_PORTD: set_bit(_DIO_DDRD, pin); break;
     c64:	21 b3       	in	r18, 0x11	; 17
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_SetPinDirection+0xd8>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	6a 95       	dec	r22
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_SetPinDirection+0xd4>
     c74:	82 2b       	or	r24, r18
     c76:	81 bb       	out	0x11, r24	; 17
     c78:	08 95       	ret

00000c7a <DIO_SetPinValue>:
	}
}
// Pin-Output
void DIO_SetPinValue(dioPort port, dioPin pin, dioStatus status)
{
	switch (status)
     c7a:	44 23       	and	r20, r20
     c7c:	19 f0       	breq	.+6      	; 0xc84 <DIO_SetPinValue+0xa>
     c7e:	41 30       	cpi	r20, 0x01	; 1
     c80:	c9 f1       	breq	.+114    	; 0xcf4 <DIO_SetPinValue+0x7a>
     c82:	08 95       	ret
	{
		case DIO_LOW:
		switch (port)
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	91 f0       	breq	.+36     	; 0xcac <DIO_SetPinValue+0x32>
     c88:	28 f0       	brcs	.+10     	; 0xc94 <DIO_SetPinValue+0x1a>
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	d9 f0       	breq	.+54     	; 0xcc4 <DIO_SetPinValue+0x4a>
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	29 f1       	breq	.+74     	; 0xcdc <DIO_SetPinValue+0x62>
     c92:	08 95       	ret
		{
			case DIO_PORTA: clr_bit(_DIO_PORTA, pin); break;
     c94:	2b b3       	in	r18, 0x1b	; 27
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_SetPinValue+0x26>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	6a 95       	dec	r22
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_SetPinValue+0x22>
     ca4:	80 95       	com	r24
     ca6:	82 23       	and	r24, r18
     ca8:	8b bb       	out	0x1b, r24	; 27
     caa:	08 95       	ret
			case DIO_PORTB: clr_bit(_DIO_PORTB, pin); break;
     cac:	28 b3       	in	r18, 0x18	; 24
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_SetPinValue+0x3e>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	6a 95       	dec	r22
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_SetPinValue+0x3a>
     cbc:	80 95       	com	r24
     cbe:	82 23       	and	r24, r18
     cc0:	88 bb       	out	0x18, r24	; 24
     cc2:	08 95       	ret
			case DIO_PORTC: clr_bit(_DIO_PORTC, pin); break;
     cc4:	25 b3       	in	r18, 0x15	; 21
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_SetPinValue+0x56>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	6a 95       	dec	r22
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_SetPinValue+0x52>
     cd4:	80 95       	com	r24
     cd6:	82 23       	and	r24, r18
     cd8:	85 bb       	out	0x15, r24	; 21
     cda:	08 95       	ret
			case DIO_PORTD: clr_bit(_DIO_PORTD, pin); break;
     cdc:	22 b3       	in	r18, 0x12	; 18
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_SetPinValue+0x6e>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	6a 95       	dec	r22
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_SetPinValue+0x6a>
     cec:	80 95       	com	r24
     cee:	82 23       	and	r24, r18
     cf0:	82 bb       	out	0x12, r24	; 18
     cf2:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (port)
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	89 f0       	breq	.+34     	; 0xd1a <DIO_SetPinValue+0xa0>
     cf8:	28 f0       	brcs	.+10     	; 0xd04 <DIO_SetPinValue+0x8a>
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	c9 f0       	breq	.+50     	; 0xd30 <DIO_SetPinValue+0xb6>
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	11 f1       	breq	.+68     	; 0xd46 <DIO_SetPinValue+0xcc>
     d02:	08 95       	ret
		{
			case DIO_PORTA: set_bit(_DIO_PORTA, pin); break;
     d04:	2b b3       	in	r18, 0x1b	; 27
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_SetPinValue+0x96>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	6a 95       	dec	r22
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_SetPinValue+0x92>
     d14:	82 2b       	or	r24, r18
     d16:	8b bb       	out	0x1b, r24	; 27
     d18:	08 95       	ret
			case DIO_PORTB: set_bit(_DIO_PORTB, pin); break;
     d1a:	28 b3       	in	r18, 0x18	; 24
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_SetPinValue+0xac>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	6a 95       	dec	r22
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_SetPinValue+0xa8>
     d2a:	82 2b       	or	r24, r18
     d2c:	88 bb       	out	0x18, r24	; 24
     d2e:	08 95       	ret
			case DIO_PORTC: set_bit(_DIO_PORTC, pin); break;
     d30:	25 b3       	in	r18, 0x15	; 21
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_SetPinValue+0xc2>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	6a 95       	dec	r22
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_SetPinValue+0xbe>
     d40:	82 2b       	or	r24, r18
     d42:	85 bb       	out	0x15, r24	; 21
     d44:	08 95       	ret
			case DIO_PORTD: set_bit(_DIO_PORTD, pin); break;
     d46:	22 b3       	in	r18, 0x12	; 18
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_SetPinValue+0xd8>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	6a 95       	dec	r22
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_SetPinValue+0xd4>
     d56:	82 2b       	or	r24, r18
     d58:	82 bb       	out	0x12, r24	; 18
     d5a:	08 95       	ret

00000d5c <DIO_TogglePinDirection>:
		break;
	}
}
void DIO_TogglePinDirection(dioPort port, dioPin pin)
{
	switch (port)
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	89 f0       	breq	.+34     	; 0xd82 <DIO_TogglePinDirection+0x26>
     d60:	28 f0       	brcs	.+10     	; 0xd6c <DIO_TogglePinDirection+0x10>
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	c9 f0       	breq	.+50     	; 0xd98 <DIO_TogglePinDirection+0x3c>
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	11 f1       	breq	.+68     	; 0xdae <DIO_TogglePinDirection+0x52>
     d6a:	08 95       	ret
	{
		case DIO_PORTA: tgl_bit(_DIO_PORTA, pin); break;
     d6c:	2b b3       	in	r18, 0x1b	; 27
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_TogglePinDirection+0x1c>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	6a 95       	dec	r22
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_TogglePinDirection+0x18>
     d7c:	82 27       	eor	r24, r18
     d7e:	8b bb       	out	0x1b, r24	; 27
     d80:	08 95       	ret
		case DIO_PORTB: tgl_bit(_DIO_PORTB, pin); break;
     d82:	28 b3       	in	r18, 0x18	; 24
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_TogglePinDirection+0x32>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	6a 95       	dec	r22
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_TogglePinDirection+0x2e>
     d92:	82 27       	eor	r24, r18
     d94:	88 bb       	out	0x18, r24	; 24
     d96:	08 95       	ret
		case DIO_PORTC: tgl_bit(_DIO_PORTC, pin); break;
     d98:	25 b3       	in	r18, 0x15	; 21
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_TogglePinDirection+0x48>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	6a 95       	dec	r22
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_TogglePinDirection+0x44>
     da8:	82 27       	eor	r24, r18
     daa:	85 bb       	out	0x15, r24	; 21
     dac:	08 95       	ret
		case DIO_PORTD: tgl_bit(_DIO_PORTD, pin); break;
     dae:	22 b3       	in	r18, 0x12	; 18
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_TogglePinDirection+0x5e>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	6a 95       	dec	r22
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_TogglePinDirection+0x5a>
     dbe:	82 27       	eor	r24, r18
     dc0:	82 bb       	out	0x12, r24	; 18
     dc2:	08 95       	ret

00000dc4 <External_Interrupt_Initialization>:

#include "Interrupts_Interface.h"

void External_Interrupt_Initialization(interruptPin intrrupt, interruptSense sense)
{
	cli();//Disable global interrupt clear bit 7 in SREG (Apartment door)
     dc4:	f8 94       	cli
	switch (intrrupt)
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	69 f1       	breq	.+90     	; 0xe24 <External_Interrupt_Initialization+0x60>
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <External_Interrupt_Initialization+0x10>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	09 f4       	brne	.+2      	; 0xdd2 <External_Interrupt_Initialization+0xe>
     dd0:	51 c0       	rjmp	.+162    	; 0xe74 <External_Interrupt_Initialization+0xb0>
     dd2:	6b c0       	rjmp	.+214    	; 0xeaa <External_Interrupt_Initialization+0xe6>
	{
		case EXT_INT0:
		clr_bit(DDRD, INT0);//Define direction for interrupt pin as input
     dd4:	8e 98       	cbi	0x11, 6	; 17
		set_bit(GICR, INT0);//Enable peripheral interrupt (Room door)
     dd6:	8b b7       	in	r24, 0x3b	; 59
     dd8:	80 64       	ori	r24, 0x40	; 64
     dda:	8b bf       	out	0x3b, r24	; 59
		switch (sense)
     ddc:	61 30       	cpi	r22, 0x01	; 1
     dde:	69 f0       	breq	.+26     	; 0xdfa <External_Interrupt_Initialization+0x36>
     de0:	28 f0       	brcs	.+10     	; 0xdec <External_Interrupt_Initialization+0x28>
     de2:	62 30       	cpi	r22, 0x02	; 2
     de4:	89 f0       	breq	.+34     	; 0xe08 <External_Interrupt_Initialization+0x44>
     de6:	63 30       	cpi	r22, 0x03	; 3
     de8:	b1 f0       	breq	.+44     	; 0xe16 <External_Interrupt_Initialization+0x52>
     dea:	5f c0       	rjmp	.+190    	; 0xeaa <External_Interrupt_Initialization+0xe6>
		{
			case EXT_INTERRUPT_SENSE_LOW:
			clr_bit(_INTERRUPT_MCUCR, ISC01); clr_bit(_INTERRUPT_MCUCR, ISC00);// 0       0
     dec:	85 b7       	in	r24, 0x35	; 53
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	85 bf       	out	0x35, r24	; 53
     df2:	85 b7       	in	r24, 0x35	; 53
     df4:	8e 7f       	andi	r24, 0xFE	; 254
     df6:	85 bf       	out	0x35, r24	; 53
			break;
     df8:	58 c0       	rjmp	.+176    	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_HIGH:
			clr_bit(_INTERRUPT_MCUCR, ISC01); set_bit(_INTERRUPT_MCUCR, ISC00);// 0       1
     dfa:	85 b7       	in	r24, 0x35	; 53
     dfc:	8d 7f       	andi	r24, 0xFD	; 253
     dfe:	85 bf       	out	0x35, r24	; 53
     e00:	85 b7       	in	r24, 0x35	; 53
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	85 bf       	out	0x35, r24	; 53
			break;
     e06:	51 c0       	rjmp	.+162    	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_FALLING:
			set_bit(_INTERRUPT_MCUCR, ISC01); clr_bit(_INTERRUPT_MCUCR, ISC00);// 1       0
     e08:	85 b7       	in	r24, 0x35	; 53
     e0a:	82 60       	ori	r24, 0x02	; 2
     e0c:	85 bf       	out	0x35, r24	; 53
     e0e:	85 b7       	in	r24, 0x35	; 53
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	85 bf       	out	0x35, r24	; 53
			break;
     e14:	4a c0       	rjmp	.+148    	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_RISING:
			set_bit(_INTERRUPT_MCUCR, ISC01); set_bit(_INTERRUPT_MCUCR, ISC00);// 1       1
     e16:	85 b7       	in	r24, 0x35	; 53
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	85 bf       	out	0x35, r24	; 53
     e1c:	85 b7       	in	r24, 0x35	; 53
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	85 bf       	out	0x35, r24	; 53
			break;
     e22:	43 c0       	rjmp	.+134    	; 0xeaa <External_Interrupt_Initialization+0xe6>
		}
		break;
		case EXT_INT1:
		clr_bit(DDRD, INT1);//Define direction for interrupt pin as input
     e24:	8f 98       	cbi	0x11, 7	; 17
		set_bit(GICR, INT1);//Enable peripheral interrupt (Room door)
     e26:	8b b7       	in	r24, 0x3b	; 59
     e28:	80 68       	ori	r24, 0x80	; 128
     e2a:	8b bf       	out	0x3b, r24	; 59
		switch (sense)
     e2c:	61 30       	cpi	r22, 0x01	; 1
     e2e:	69 f0       	breq	.+26     	; 0xe4a <External_Interrupt_Initialization+0x86>
     e30:	28 f0       	brcs	.+10     	; 0xe3c <External_Interrupt_Initialization+0x78>
     e32:	62 30       	cpi	r22, 0x02	; 2
     e34:	89 f0       	breq	.+34     	; 0xe58 <External_Interrupt_Initialization+0x94>
     e36:	63 30       	cpi	r22, 0x03	; 3
     e38:	b1 f0       	breq	.+44     	; 0xe66 <External_Interrupt_Initialization+0xa2>
     e3a:	37 c0       	rjmp	.+110    	; 0xeaa <External_Interrupt_Initialization+0xe6>
		{
			case EXT_INTERRUPT_SENSE_LOW:
			clr_bit(_INTERRUPT_MCUCR, ISC11); clr_bit(_INTERRUPT_MCUCR, ISC10);// 0       0
     e3c:	85 b7       	in	r24, 0x35	; 53
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	85 bf       	out	0x35, r24	; 53
     e42:	85 b7       	in	r24, 0x35	; 53
     e44:	8b 7f       	andi	r24, 0xFB	; 251
     e46:	85 bf       	out	0x35, r24	; 53
			break;
     e48:	30 c0       	rjmp	.+96     	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_HIGH:
			clr_bit(_INTERRUPT_MCUCR, ISC11); set_bit(_INTERRUPT_MCUCR, ISC10);// 0       1
     e4a:	85 b7       	in	r24, 0x35	; 53
     e4c:	87 7f       	andi	r24, 0xF7	; 247
     e4e:	85 bf       	out	0x35, r24	; 53
     e50:	85 b7       	in	r24, 0x35	; 53
     e52:	84 60       	ori	r24, 0x04	; 4
     e54:	85 bf       	out	0x35, r24	; 53
			break;
     e56:	29 c0       	rjmp	.+82     	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_FALLING:
			set_bit(_INTERRUPT_MCUCR, ISC11); clr_bit(_INTERRUPT_MCUCR, ISC10);// 1       0
     e58:	85 b7       	in	r24, 0x35	; 53
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	85 bf       	out	0x35, r24	; 53
     e5e:	85 b7       	in	r24, 0x35	; 53
     e60:	8b 7f       	andi	r24, 0xFB	; 251
     e62:	85 bf       	out	0x35, r24	; 53
			break;
     e64:	22 c0       	rjmp	.+68     	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_RISING:
			set_bit(_INTERRUPT_MCUCR, ISC11); set_bit(_INTERRUPT_MCUCR, ISC10);// 1       1
     e66:	85 b7       	in	r24, 0x35	; 53
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	85 bf       	out	0x35, r24	; 53
     e6c:	85 b7       	in	r24, 0x35	; 53
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	85 bf       	out	0x35, r24	; 53
			break;
     e72:	1b c0       	rjmp	.+54     	; 0xeaa <External_Interrupt_Initialization+0xe6>
		}
		break;
		case EXT_INT2:
		clr_bit(DDRB, INT2);//Define direction for interrupt pin as input
     e74:	bd 98       	cbi	0x17, 5	; 23
		set_bit(GICR, INT2);//Enable peripheral interrupt (Room door)
     e76:	8b b7       	in	r24, 0x3b	; 59
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8b bf       	out	0x3b, r24	; 59
		switch (sense)
     e7c:	61 30       	cpi	r22, 0x01	; 1
     e7e:	91 f0       	breq	.+36     	; 0xea4 <External_Interrupt_Initialization+0xe0>
     e80:	28 f0       	brcs	.+10     	; 0xe8c <External_Interrupt_Initialization+0xc8>
     e82:	62 30       	cpi	r22, 0x02	; 2
     e84:	39 f0       	breq	.+14     	; 0xe94 <External_Interrupt_Initialization+0xd0>
     e86:	63 30       	cpi	r22, 0x03	; 3
     e88:	49 f0       	breq	.+18     	; 0xe9c <External_Interrupt_Initialization+0xd8>
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <External_Interrupt_Initialization+0xe6>
		{
			case EXT_INTERRUPT_SENSE_LOW:
			clr_bit(_INTERRUPT_MCUCSR, ISC2);// 0
     e8c:	84 b7       	in	r24, 0x34	; 52
     e8e:	8f 7b       	andi	r24, 0xBF	; 191
     e90:	84 bf       	out	0x34, r24	; 52
			break;
     e92:	0b c0       	rjmp	.+22     	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_FALLING:
			clr_bit(_INTERRUPT_MCUCSR, ISC2);// 0
     e94:	84 b7       	in	r24, 0x34	; 52
     e96:	8f 7b       	andi	r24, 0xBF	; 191
     e98:	84 bf       	out	0x34, r24	; 52
			break;
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_RISING:
			set_bit(_INTERRUPT_MCUCSR, ISC2);// 1
     e9c:	84 b7       	in	r24, 0x34	; 52
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	84 bf       	out	0x34, r24	; 52
			break;
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <External_Interrupt_Initialization+0xe6>
			case EXT_INTERRUPT_SENSE_HIGH:
			set_bit(_INTERRUPT_MCUCSR, ISC2);// 1
     ea4:	84 b7       	in	r24, 0x34	; 52
     ea6:	80 64       	ori	r24, 0x40	; 64
     ea8:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
	sei();//Enable global interrupt set bit 7 in SREG (Apartment door)
     eaa:	78 94       	sei
     eac:	08 95       	ret

00000eae <Timer0_OVF_WithInterrupt_Initialize>:
}
void Timer0_OVF_WithInterrupt_Stop (void)
{
	/*Choose pre-scaler 0*/
	//_T0_OVF_TCCR0 = 0x00;
	_T0_OVF_TCCR0 &=~((1<<CS01)|(1<<CS02)|(1<<CS00));
     eae:	bb 9a       	sbi	0x17, 3	; 23
     eb0:	83 b7       	in	r24, 0x33	; 51
     eb2:	13 be       	out	0x33, r1	; 51
     eb4:	89 b7       	in	r24, 0x39	; 57
     eb6:	81 60       	ori	r24, 0x01	; 1
     eb8:	89 bf       	out	0x39, r24	; 57
     eba:	78 94       	sei
     ebc:	08 95       	ret

00000ebe <Timer0_OVF_WithInterrupt_Start>:
     ebe:	93 b7       	in	r25, 0x33	; 51
     ec0:	9d 7f       	andi	r25, 0xFD	; 253
     ec2:	93 bf       	out	0x33, r25	; 51
     ec4:	93 b7       	in	r25, 0x33	; 51
     ec6:	95 60       	ori	r25, 0x05	; 5
     ec8:	93 bf       	out	0x33, r25	; 51
     eca:	88 23       	and	r24, r24
     ecc:	19 f0       	breq	.+6      	; 0xed4 <Timer0_OVF_WithInterrupt_Start+0x16>
     ece:	85 30       	cpi	r24, 0x05	; 5
     ed0:	29 f0       	breq	.+10     	; 0xedc <Timer0_OVF_WithInterrupt_Start+0x1e>
     ed2:	08 95       	ret
     ed4:	83 b7       	in	r24, 0x33	; 51
     ed6:	88 7f       	andi	r24, 0xF8	; 248
     ed8:	83 bf       	out	0x33, r24	; 51
     eda:	08 95       	ret
     edc:	83 b7       	in	r24, 0x33	; 51
     ede:	8d 7f       	andi	r24, 0xFD	; 253
     ee0:	83 bf       	out	0x33, r24	; 51
     ee2:	83 b7       	in	r24, 0x33	; 51
     ee4:	85 60       	ori	r24, 0x05	; 5
     ee6:	83 bf       	out	0x33, r24	; 51
     ee8:	08 95       	ret

00000eea <Timer0_OVF_WithInterrupt_SetDelay>:
}
void Timer0_OVF_WithInterrupt_SetDelay (uint32_t delay)
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
	4- Create OVF = Count / 2^8 + 1
	5- Create Initial value = 2^8 - (Count % 2^8)
	6- Set initial value
	*/
	uint8_t Tick = ((1*_T0_OVF_PRESCALER)/_T0_OVF_FREQUENCY);
	uint32_t Count = ((delay * _T0_OVF_MICROSECOND) / Tick);
     ef2:	a8 ee       	ldi	r26, 0xE8	; 232
     ef4:	b3 e0       	ldi	r27, 0x03	; 3
     ef6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__muluhisi3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	68 94       	set
     f00:	15 f8       	bld	r1, 5
     f02:	b6 95       	lsr	r27
     f04:	a7 95       	ror	r26
     f06:	97 95       	ror	r25
     f08:	87 95       	ror	r24
     f0a:	16 94       	lsr	r1
     f0c:	d1 f7       	brne	.-12     	; 0xf02 <Timer0_OVF_WithInterrupt_SetDelay+0x18>
	_T0_OVF_Count = (Count / _T0_OVF_BITS) + 1;
     f0e:	09 2f       	mov	r16, r25
     f10:	1a 2f       	mov	r17, r26
     f12:	2b 2f       	mov	r18, r27
     f14:	33 27       	eor	r19, r19
     f16:	0f 5f       	subi	r16, 0xFF	; 255
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	2f 4f       	sbci	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <_T0_OVF_Count>
     f22:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <_T0_OVF_Count+0x1>
     f26:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <_T0_OVF_Count+0x2>
     f2a:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <_T0_OVF_Count+0x3>
	_T0_OVF_iValue = _T0_OVF_BITS - (Count % _T0_OVF_BITS);
     f2e:	68 2f       	mov	r22, r24
     f30:	61 95       	neg	r22
     f32:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <_T0_OVF_iValue>
	_T0_OVF_TCNT0 = _T0_OVF_iValue;
     f36:	62 bf       	out	0x32, r22	; 50
}
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret

00000f3e <__divmodhi4>:
     f3e:	97 fb       	bst	r25, 7
     f40:	07 2e       	mov	r0, r23
     f42:	16 f4       	brtc	.+4      	; 0xf48 <__divmodhi4+0xa>
     f44:	00 94       	com	r0
     f46:	07 d0       	rcall	.+14     	; 0xf56 <__divmodhi4_neg1>
     f48:	77 fd       	sbrc	r23, 7
     f4a:	09 d0       	rcall	.+18     	; 0xf5e <__divmodhi4_neg2>
     f4c:	0e 94 f5 07 	call	0xfea	; 0xfea <__udivmodhi4>
     f50:	07 fc       	sbrc	r0, 7
     f52:	05 d0       	rcall	.+10     	; 0xf5e <__divmodhi4_neg2>
     f54:	3e f4       	brtc	.+14     	; 0xf64 <__divmodhi4_exit>

00000f56 <__divmodhi4_neg1>:
     f56:	90 95       	com	r25
     f58:	81 95       	neg	r24
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	08 95       	ret

00000f5e <__divmodhi4_neg2>:
     f5e:	70 95       	com	r23
     f60:	61 95       	neg	r22
     f62:	7f 4f       	sbci	r23, 0xFF	; 255

00000f64 <__divmodhi4_exit>:
     f64:	08 95       	ret

00000f66 <__udivmodsi4>:
     f66:	a1 e2       	ldi	r26, 0x21	; 33
     f68:	1a 2e       	mov	r1, r26
     f6a:	aa 1b       	sub	r26, r26
     f6c:	bb 1b       	sub	r27, r27
     f6e:	fd 01       	movw	r30, r26
     f70:	0d c0       	rjmp	.+26     	; 0xf8c <__udivmodsi4_ep>

00000f72 <__udivmodsi4_loop>:
     f72:	aa 1f       	adc	r26, r26
     f74:	bb 1f       	adc	r27, r27
     f76:	ee 1f       	adc	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	a2 17       	cp	r26, r18
     f7c:	b3 07       	cpc	r27, r19
     f7e:	e4 07       	cpc	r30, r20
     f80:	f5 07       	cpc	r31, r21
     f82:	20 f0       	brcs	.+8      	; 0xf8c <__udivmodsi4_ep>
     f84:	a2 1b       	sub	r26, r18
     f86:	b3 0b       	sbc	r27, r19
     f88:	e4 0b       	sbc	r30, r20
     f8a:	f5 0b       	sbc	r31, r21

00000f8c <__udivmodsi4_ep>:
     f8c:	66 1f       	adc	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	1a 94       	dec	r1
     f96:	69 f7       	brne	.-38     	; 0xf72 <__udivmodsi4_loop>
     f98:	60 95       	com	r22
     f9a:	70 95       	com	r23
     f9c:	80 95       	com	r24
     f9e:	90 95       	com	r25
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	bd 01       	movw	r22, r26
     fa6:	cf 01       	movw	r24, r30
     fa8:	08 95       	ret

00000faa <__tablejump2__>:
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	05 90       	lpm	r0, Z+
     fb0:	f4 91       	lpm	r31, Z
     fb2:	e0 2d       	mov	r30, r0
     fb4:	09 94       	ijmp

00000fb6 <__umulhisi3>:
     fb6:	a2 9f       	mul	r26, r18
     fb8:	b0 01       	movw	r22, r0
     fba:	b3 9f       	mul	r27, r19
     fbc:	c0 01       	movw	r24, r0
     fbe:	a3 9f       	mul	r26, r19
     fc0:	70 0d       	add	r23, r0
     fc2:	81 1d       	adc	r24, r1
     fc4:	11 24       	eor	r1, r1
     fc6:	91 1d       	adc	r25, r1
     fc8:	b2 9f       	mul	r27, r18
     fca:	70 0d       	add	r23, r0
     fcc:	81 1d       	adc	r24, r1
     fce:	11 24       	eor	r1, r1
     fd0:	91 1d       	adc	r25, r1
     fd2:	08 95       	ret

00000fd4 <__muluhisi3>:
     fd4:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__umulhisi3>
     fd8:	a5 9f       	mul	r26, r21
     fda:	90 0d       	add	r25, r0
     fdc:	b4 9f       	mul	r27, r20
     fde:	90 0d       	add	r25, r0
     fe0:	a4 9f       	mul	r26, r20
     fe2:	80 0d       	add	r24, r0
     fe4:	91 1d       	adc	r25, r1
     fe6:	11 24       	eor	r1, r1
     fe8:	08 95       	ret

00000fea <__udivmodhi4>:
     fea:	aa 1b       	sub	r26, r26
     fec:	bb 1b       	sub	r27, r27
     fee:	51 e1       	ldi	r21, 0x11	; 17
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__udivmodhi4_ep>

00000ff2 <__udivmodhi4_loop>:
     ff2:	aa 1f       	adc	r26, r26
     ff4:	bb 1f       	adc	r27, r27
     ff6:	a6 17       	cp	r26, r22
     ff8:	b7 07       	cpc	r27, r23
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <__udivmodhi4_ep>
     ffc:	a6 1b       	sub	r26, r22
     ffe:	b7 0b       	sbc	r27, r23

00001000 <__udivmodhi4_ep>:
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	5a 95       	dec	r21
    1006:	a9 f7       	brne	.-22     	; 0xff2 <__udivmodhi4_loop>
    1008:	80 95       	com	r24
    100a:	90 95       	com	r25
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	08 95       	ret

00001012 <__ltoa_ncheck>:
    1012:	bb 27       	eor	r27, r27
    1014:	2a 30       	cpi	r18, 0x0A	; 10
    1016:	51 f4       	brne	.+20     	; 0x102c <__ltoa_ncheck+0x1a>
    1018:	99 23       	and	r25, r25
    101a:	42 f4       	brpl	.+16     	; 0x102c <__ltoa_ncheck+0x1a>
    101c:	bd e2       	ldi	r27, 0x2D	; 45
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__ultoa_common>

00001030 <__ultoa_ncheck>:
    1030:	bb 27       	eor	r27, r27

00001032 <__ultoa_common>:
    1032:	fa 01       	movw	r30, r20
    1034:	a6 2f       	mov	r26, r22
    1036:	62 17       	cp	r22, r18
    1038:	71 05       	cpc	r23, r1
    103a:	81 05       	cpc	r24, r1
    103c:	91 05       	cpc	r25, r1
    103e:	33 0b       	sbc	r19, r19
    1040:	30 fb       	bst	r19, 0
    1042:	66 f0       	brts	.+24     	; 0x105c <__ultoa_common+0x2a>
    1044:	aa 27       	eor	r26, r26
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	aa 1f       	adc	r26, r26
    1050:	a2 17       	cp	r26, r18
    1052:	10 f0       	brcs	.+4      	; 0x1058 <__ultoa_common+0x26>
    1054:	a2 1b       	sub	r26, r18
    1056:	63 95       	inc	r22
    1058:	38 50       	subi	r19, 0x08	; 8
    105a:	a9 f7       	brne	.-22     	; 0x1046 <__ultoa_common+0x14>
    105c:	a0 5d       	subi	r26, 0xD0	; 208
    105e:	aa 33       	cpi	r26, 0x3A	; 58
    1060:	08 f0       	brcs	.+2      	; 0x1064 <__ultoa_common+0x32>
    1062:	a9 5d       	subi	r26, 0xD9	; 217
    1064:	a1 93       	st	Z+, r26
    1066:	36 f7       	brtc	.-52     	; 0x1034 <__ultoa_common+0x2>
    1068:	b1 11       	cpse	r27, r1
    106a:	b1 93       	st	Z+, r27
    106c:	10 82       	st	Z, r1
    106e:	ca 01       	movw	r24, r20
    1070:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <strrev>

00001074 <strrev>:
    1074:	dc 01       	movw	r26, r24
    1076:	fc 01       	movw	r30, r24
    1078:	67 2f       	mov	r22, r23
    107a:	71 91       	ld	r23, Z+
    107c:	77 23       	and	r23, r23
    107e:	e1 f7       	brne	.-8      	; 0x1078 <strrev+0x4>
    1080:	32 97       	sbiw	r30, 0x02	; 2
    1082:	04 c0       	rjmp	.+8      	; 0x108c <strrev+0x18>
    1084:	7c 91       	ld	r23, X
    1086:	6d 93       	st	X+, r22
    1088:	70 83       	st	Z, r23
    108a:	62 91       	ld	r22, -Z
    108c:	ae 17       	cp	r26, r30
    108e:	bf 07       	cpc	r27, r31
    1090:	c8 f3       	brcs	.-14     	; 0x1084 <strrev+0x10>
    1092:	08 95       	ret

00001094 <_exit>:
    1094:	f8 94       	cli

00001096 <__stop_program>:
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <__stop_program>
